import os
import logging
import random
import time
from typing import Dict, List, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask
from threading import Thread

app = Flask('')
@app.route('/')
def home(): return "üé∞ Casino Bot is Running!"
Thread(target=lambda: app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))).start()

TOKEN = os.environ.get('TELEGRAM_TOKEN')

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

class CasinoBot:
    def __init__(self):
        # –ó–∞–¥–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ username
        self.creator_usernames = {"frapellogello"}  # username –±–µ–∑ @ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        self.users = {}
        self.banned_users = set()
        self.admin_logs = []
        self.games = {
            1: {"name": "–†—É–ª–µ—Ç–∫–∞", "description": "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36"},
            2: {"name": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", "description": "–£–≥–∞–¥–∞–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏"},
            3: {"name": "–ú–æ–Ω–µ—Ç–∫–∞", "description": "–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞"}
        }
        self.privileges = {
            "bronze": {"cost": 1000, "bonus": 1.1, "title": "ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π –∏–≥—Ä–æ–∫"},
            "silver": {"cost": 5000, "bonus": 1.2, "title": "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–∞–≥–Ω–∞—Ç"},
            "gold": {"cost": 15000, "bonus": 1.3, "title": "ü•á –ó–æ–ª–æ—Ç–æ–π –∫–æ—Ä–æ–ª—å"},
            "platinum": {"cost": 30000, "bonus": 1.5, "title": "üíé –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∏–º–ø–µ—Ä–∞—Ç–æ—Ä"}
        }
        self.exclusive_donates = {
            "TITAN": {"multiplier": 10, "description": "x10 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"},
            "FLE": {"multiplier": 20, "description": "x20 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"},
            "DRAGON": {"multiplier": 50, "description": "x50 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ + 1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞"}
        }

    def init_user(self, user_id: int, username: str):
        if user_id not in self.users:
            is_creator = username and username.lower() in self.creator_usernames
            self.users[user_id] = {
                "username": username,
                "balance": 1000,
                "play_coins": 0,
                "privilege": None,
                "exclusive_donate": None,
                "total_earned": 0,
                "games_played": 0,
                "win_streak": 0,
                "last_win": False,
                "is_admin": is_creator  # –°–æ–∑–¥–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            }
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å, –¥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            if is_creator:
                self.users[user_id]["balance"] = float('inf')
                self.users[user_id]["play_coins"] = float('inf')

    def is_creator(self, user_id: int) -> bool:
        if user_id not in self.users:
            return False
        username = self.users[user_id].get("username")
        return username and username.lower() in self.creator_usernames

    def is_admin(self, user_id: int) -> bool:
        return self.is_creator(user_id) or (user_id in self.users and self.users[user_id]["is_admin"])

    def is_banned(self, user_id: int) -> bool:
        return user_id in self.banned_users

    def check_privilege_bonus(self, user_id: int, base_win: int) -> int:
        user = self.users[user_id]
        bonus_multiplier = 1.0
        
        if user["privilege"]:
            privilege_info = self.privileges[user["privilege"]]
            bonus_multiplier *= privilege_info["bonus"]
        
        if user["exclusive_donate"]:
            donate_info = self.exclusive_donates[user["exclusive_donate"]]
            bonus_multiplier *= donate_info["multiplier"]
        
        return int(base_win * bonus_multiplier)

    def get_leaderboard(self) -> List[Tuple[int, Dict]]:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
        filtered_users = {uid: data for uid, data in self.users.items() 
                         if not self.is_creator(uid)}
        sorted_users = sorted(filtered_users.items(), key=lambda x: x[1]["total_earned"], reverse=True)
        return sorted_users[:10]

    def spin_wheel(self, user_id: int) -> str:
        user = self.users[user_id]
        
        if not self.is_creator(user_id) and user["play_coins"] < 100:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PlayCoin! –ù—É–∂–Ω–æ 100 PlayCoin –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞."
        
        if not self.is_creator(user_id):
            user["play_coins"] -= 100
            
        won_privilege = random.choice(list(self.privileges.keys()))
        user["privilege"] = won_privilege
        
        privilege_info = self.privileges[won_privilege]
        return f"üé° –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {privilege_info['title']}!\n–ë–æ–Ω—É—Å: +{int((privilege_info['bonus'] - 1) * 100)}% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º"

    def search_user_by_username(self, username: str) -> List[Tuple[int, Dict]]:
        found_users = []
        username = username.lower().replace('@', '')
        
        for user_id, user_data in self.users.items():
            if user_data["username"] and user_data["username"].lower() == username:
                found_users.append((user_id, user_data))
                
        return found_users

    def add_admin_log(self, admin_id: int, admin_username: str, action: str, target_username: str = "", details: str = ""):
        log_entry = {
            "timestamp": time.time(),
            "admin_id": admin_id,
            "admin_username": admin_username,
            "action": action,
            "target_username": target_username,
            "details": details
        }
        self.admin_logs.append(log_entry)
        
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
        if len(self.admin_logs) > 50:
            self.admin_logs.pop(0)

bot_data = CasinoBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    if bot_data.is_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    bot_data.init_user(user_id, user.username)
    
    if bot_data.is_creator(user_id):
        await update.message.reply_text(
            f"üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–û–ó–î–ê–¢–ï–õ–¨!\n"
            f"üë§ –í–∞—à username: @{user.username}\n"
            f"üÜî –í–∞—à ID: `{user_id}`\n\n"
            f"üíé –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏ PlayCoin!\n\n"
            f"üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/play [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            f"/shop - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n"
            f"/leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
            f"/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/wheel - –∫–æ–ª–µ—Å–æ —É–¥–∞—á–∏ (100 PC)\n"
            f"/author - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ\n\n"
            f"‚öôÔ∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è:\n"
            f"/givecash [id] [amount] - –≤—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
            f"/givedonate [id] [donate] - –≤—ã–¥–∞—Ç—å –¥–æ–Ω–∞—Ç\n"
            f"/ban [id] - –∑–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
            f"/unban [id] - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
            f"/search [@username] - –Ω–∞–π—Ç–∏ ID –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É\n"
            f"/setgladmin [@username] - –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"/logs - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
            parse_mode='Markdown'
        )
    elif bot_data.users[user_id].get("is_admin", False):
        await update.message.reply_text(
            f"üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
            f"üë§ –í–∞—à ID: `{user_id}`\n\n"
            f"üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/play [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            f"/shop - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n"
            f"/leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
            f"/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/wheel - –∫–æ–ª–µ—Å–æ —É–¥–∞—á–∏ (100 PC)\n"
            f"/author - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ\n\n"
            f"‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            f"/givecash [id] [amount] - –≤—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
            f"/givedonate [id] [donate] - –≤—ã–¥–∞—Ç—å –¥–æ–Ω–∞—Ç\n"
            f"/ban [id] - –∑–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n"
            f"/unban [id] - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç!\n"
            f"üë§ –í–∞—à ID: `{user_id}`\n\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/play [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            f"/shop - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n"
            f"/leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
            f"/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/wheel - –∫–æ–ª–µ—Å–æ —É–¥–∞—á–∏ (100 PC)\n"
            f"/author - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ",
            parse_mode='Markdown'
        )

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ setgladmin, logs, search, givecash, givedonate, ban, unban –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# –ö–æ–ø–∏—Ä—É–µ–º –∏—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def setgladmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_creator(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setgladmin [@username]\n–ü—Ä–∏–º–µ—Ä: /setgladmin @username")
        return
    
    username = context.args[0]
    found_users = bot_data.search_user_by_username(username)
    
    if not found_users:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    target_id, target_data = found_users[0]
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    bot_data.users[target_id]["is_admin"] = True
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    admin_username = update.effective_user.username or str(update.effective_user.id)
    bot_data.add_admin_log(user_id, admin_username, "–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï_–ê–î–ú–ò–ù–ê", target_data["username"])
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_data['username']} —Ç–µ–ø–µ—Ä—å –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

async def logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_creator(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if not bot_data.admin_logs:
        await update.message.reply_text("üìù –õ–æ–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç—ã.")
        return
    
    response = "üìù –õ–û–ì–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í:\n\n"
    
    for log in reversed(bot_data.admin_logs[-20:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(log["timestamp"]))
        admin = f"@{log['admin_username']}" if log['admin_username'] else f"ID:{log['admin_id']}"
        target = f"@{log['target_username']}" if log['target_username'] else ""
        
        action_text = ""
        if log["action"] == "–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï_–ê–î–ú–ò–ù–ê":
            action_text = f"–Ω–∞–∑–Ω–∞—á–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {target}"
        elif log["action"] == "–í–´–î–ê–ß–ê_–ú–û–ù–ï–¢":
            action_text = f"–≤—ã–¥–∞–ª –º–æ–Ω–µ—Ç—ã {target} ({log['details']})"
        elif log["action"] == "–í–´–î–ê–ß–ê_–î–û–ù–ê–¢–ê":
            action_text = f"–≤—ã–¥–∞–ª –¥–æ–Ω–∞—Ç {target} ({log['details']})"
        elif log["action"] == "–ë–ê–ù":
            action_text = f"–∑–∞–±–∞–Ω–∏–ª {target}"
        elif log["action"] == "–†–ê–ó–ë–ê–ù":
            action_text = f"—Ä–∞–∑–±–∞–Ω–∏–ª {target}"
        
        response += f"‚è∞ {timestamp}\n"
        response += f"üë§ {admin} {action_text}\n"
        response += "‚îÄ" * 40 + "\n"
    
    await update.message.reply_text(response)

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search [@username]\n–ü—Ä–∏–º–µ—Ä: /search @username")
        return
    
    username = context.args[0]
    found_users = bot_data.search_user_by_username(username)
    
    if not found_users:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    response = f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É {username}:\n\n"
    for user_id, user_data in found_users:
        response += f"üë§ Username: @{user_data['username']}\n"
        response += f"üÜî ID: `{user_id}`\n"
        response += f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}\n"
        response += f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data['games_played']}\n"
        response += f"üèÜ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user_data['total_earned']}\n"
        response += "‚îÄ" * 30 + "\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def givecash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /givecash [id] [amount]")
        return
    
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    if target_id not in bot_data.users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    bot_data.users[target_id]["balance"] += amount
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å
    if not bot_data.is_creator(user_id):
        admin_username = update.effective_user.username or str(user_id)
        target_username = bot_data.users[target_id]["username"] or str(target_id)
        bot_data.add_admin_log(user_id, admin_username, "–í–´–î–ê–ß–ê_–ú–û–ù–ï–¢", target_username, f"{amount} –º–æ–Ω–µ—Ç")
    
    await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}")

async def givedonate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /givedonate [id] [donate]\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–Ω–∞—Ç—ã: TITAN, FLE, DRAGON")
        return
    
    try:
        target_id = int(context.args[0])
        donate_name = context.args[1].upper()
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_id not in bot_data.users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if donate_name not in bot_data.exclusive_donates:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–Ω–∞—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: TITAN, FLE, DRAGON")
        return
    
    bot_data.users[target_id]["exclusive_donate"] = donate_name
    donate_desc = bot_data.exclusive_donates[donate_name]["description"]
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å
    if not bot_data.is_creator(user_id):
        admin_username = update.effective_user.username or str(user_id)
        target_username = bot_data.users[target_id]["username"] or str(target_id)
        bot_data.add_admin_log(user_id, admin_username, "–í–´–î–ê–ß–ê_–î–û–ù–ê–¢–ê", target_username, donate_name)
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω –¥–æ–Ω–∞—Ç {donate_name}\n{donate_desc}")

async def ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban [id]")
        return
    
    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if bot_data.is_creator(target_id):
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è")
        return
    
    bot_data.banned_users.add(target_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å
    if not bot_data.is_creator(user_id):
        admin_username = update.effective_user.username or str(user_id)
        target_username = bot_data.users[target_id]["username"] if target_id in bot_data.users else str(target_id)
        bot_data.add_admin_log(user_id, admin_username, "–ë–ê–ù", target_username)
    
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω")

async def unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban [id]")
        return
    
    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_id in bot_data.banned_users:
        bot_data.banned_users.remove(target_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å
        if not bot_data.is_creator(user_id):
            admin_username = update.effective_user.username or str(user_id)
            target_username = bot_data.users[target_id]["username"] if target_id in bot_data.users else str(target_id)
            bot_data.add_admin_log(user_id, admin_username, "–†–ê–ó–ë–ê–ù", target_username)
        
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ author, play, wheel, shop, button_handler, buy_privilege, leaderboard, stats –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# –ö–æ–ø–∏—Ä—É–µ–º –∏—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞

async def author(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë®‚Äçüíª –ê–≤—Ç–æ—Ä –±–æ—Ç–∞: –°–∞–º–∏—Ä")

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    if len(context.args) != 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /play [—Å—Ç–∞–≤–∫–∞] [–Ω–æ–º–µ—Ä –∏–≥—Ä—ã]\n\n"
            "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n"
            "1. üé° –†—É–ª–µ—Ç–∫–∞ (1-36)\n"
            "2. üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n"
            "3. ü™ô –ú–æ–Ω–µ—Ç–∫–∞"
        )
        return

    try:
        bet = int(context.args[0])
        game_id = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞–≤–∫–∞ –∏ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return

    if game_id not in bot_data.games:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    user = bot_data.users[user_id]
    is_creator = bot_data.is_creator(user_id)
    
    if not is_creator and bet > user["balance"]:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    if bet <= 0:
        await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return

    if not is_creator:
        user["balance"] -= bet
    
    user["games_played"] += 1

    result_text = ""
    win_amount = 0
    won = False

    if game_id == 1:
        user_number = random.randint(1, 36)
        win_number = random.randint(1, 36)
        if user_number == win_number:
            win_amount = bet * 36
            won = True
            result_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {win_number} –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}!"
        else:
            result_text = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: {user_number}, –≤—ã–ø–∞–ª–æ: {win_number}"

    elif game_id == 2:
        user_x, user_y = random.randint(1, 10), random.randint(1, 10)
        target_x, target_y = random.randint(1, 10), random.randint(1, 10)
        distance = abs(user_x - target_x) + abs(user_y - target_y)
        
        if distance == 0:
            win_amount = bet * 10
            won = True
            result_text = f"üéâ –ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ! –í—ã–∏–≥—Ä—ã—à: {win_amount}"
        elif distance <= 2:
            win_amount = bet * 3
            won = True
            result_text = f"‚úÖ –ë–ª–∏–∑–∫–æ! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance}. –í—ã–∏–≥—Ä—ã—à: {win_amount}"
        else:
            result_text = f"‚ùå –ú–∏–º–æ. –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({user_x},{user_y}), —Ü–µ–ª—å: ({target_x},{target_y})"

    elif game_id == 3:
        user_choice = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
        result = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
        if user_choice == result:
            win_amount = bet * 2
            won = True
            result_text = f"üéâ {result.capitalize()}! –í—ã —É–≥–∞–¥–∞–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}!"
        else:
            result_text = f"‚ùå {result.capitalize()}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."

    if won:
        user["last_win"] = True
        user["win_streak"] += 1
        
        if user["win_streak"] >= 2:
            play_coins_earned = 5
            user["play_coins"] += play_coins_earned
            result_text += f"\nüéØ –°—Ç—Ä–∞–π–∫ {user['win_streak']} –ø–æ–±–µ–¥! +{play_coins_earned} PlayCoin"
    else:
        user["last_win"] = False
        user["win_streak"] = 0

    if win_amount > 0:
        bonus_win = bot_data.check_privilege_bonus(user_id, win_amount)
        if bonus_win > win_amount:
            result_text += f"\nüéÅ –ë–æ–Ω—É—Å: +{bonus_win - win_amount}"
            win_amount = bonus_win
        
        if not is_creator:
            user["balance"] += win_amount
            user["total_earned"] += win_amount

    if not is_creator:
        user["balance"] = max(0, user["balance"])
    
    result_text += f"\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {'‚àû' if is_creator else user['balance']}"
    result_text += f"\nüéØ PlayCoin: {'‚àû' if is_creator else user['play_coins']}"
    result_text += f"\nüî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {user['win_streak']}"
    
    await update.message.reply_text(result_text)

async def wheel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    result = bot_data.spin_wheel(user_id)
    user = bot_data.users[user_id]
    
    result_text = f"{result}\n\nüéØ –û—Å—Ç–∞–ª–æ—Å—å PlayCoin: {'‚àû' if bot_data.is_creator(user_id) else user['play_coins']}"
    await update.message.reply_text(result_text)

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    user = bot_data.users[user_id]
    keyboard = []
    
    for priv_id, priv_info in bot_data.privileges.items():
        status = "‚úÖ" if user["privilege"] == priv_id else "üîí"
        cost = priv_info["cost"]
        bonus = int((priv_info["bonus"] - 1) * 100)
        title = priv_info["title"]
        
        button_text = f"{status} {title} - {cost} üí∞ (+{bonus}%)"
        callback_data = f"buy_{priv_id}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üè™ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {'‚àû' if bot_data.is_creator(user_id) else user['balance']}\n"
        f"üéØ PlayCoin: {'‚àû' if bot_data.is_creator(user_id) else user['play_coins']}\n"
        f"üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {bot_data.privileges[user['privilege']]['title'] if user['privilege'] else '–ù–µ—Ç'}",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if bot_data.is_banned(user_id):
        await query.edit_message_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    data = query.data
    
    if data.startswith("buy_"):
        priv_id = data[4:]
        await buy_privilege(user_id, priv_id, query)

async def buy_privilege(user_id: int, priv_id: str, query):
    if priv_id not in bot_data.privileges:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    user = bot_data.users[user_id]
    priv_info = bot_data.privileges[priv_id]
    
    if not bot_data.is_creator(user_id) and user["balance"] < priv_info["cost"]:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return
    
    if not bot_data.is_creator(user_id):
        user["balance"] -= priv_info["cost"]
    
    user["privilege"] = priv_id
    
    await query.edit_message_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {priv_info['title']}\n"
        f"–ë–æ–Ω—É—Å: +{int((priv_info['bonus'] - 1) * 100)}% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º\n\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {'‚àû' if bot_data.is_creator(user_id) else user['balance']}"
    )

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    leaderboard_data = bot_data.get_leaderboard()
    
    if not leaderboard_data:
        await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
        return
    
    text = "üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í üèÜ\n\n"
    
    for i, (user_id, user_data) in enumerate(leaderboard_data, 1):
        username = user_data["username"] or f"–ò–≥—Ä–æ–∫ {user_id}"
        privilege_title = ""
        if user_data["privilege"]:
            privilege_title = bot_data.privileges[user_data["privilege"]]["title"]
        
        text += f"{i}. {username} {privilege_title}\n"
        text += f"   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user_data['total_earned']}\n\n"
    
    await update.message.reply_text(text)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    user = bot_data.users[user_id]
    privilege_title = "–ù–µ—Ç"
    if user["privilege"]:
        privilege_title = bot_data.privileges[user["privilege"]]["title"]
    
    donate_info = "–ù–µ—Ç"
    if user["exclusive_donate"]:
        donate_desc = bot_data.exclusive_donates[user["exclusive_donate"]]["description"]
        donate_info = f"{user['exclusive_donate']} ({donate_desc})"
    
    role = ""
    if bot_data.is_creator(user_id):
        role = "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å"
    elif user.get("is_admin", False):
        role = "üîß –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    await update.message.reply_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {role}\n\n"
        f"üë§ ID: `{user_id}`\n"
        f"üë§ Username: @{user['username']}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {'‚àû' if bot_data.is_creator(user_id) else user['balance']}\n"
        f"üéØ PlayCoin: {'‚àû' if bot_data.is_creator(user_id) else user['play_coins']}\n"
        f"üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privilege_title}\n"
        f"üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –¥–æ–Ω–∞—Ç: {donate_info}\n"
        f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user['games_played']}\n"
        f"üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_earned']}\n"
        f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {user['win_streak']}",
        parse_mode='Markdown'
    )

def main():
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(CommandHandler("shop", shop))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("author", author))
    application.add_handler(CommandHandler("wheel", wheel))
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    application.add_handler(CommandHandler("givecash", givecash))
    application.add_handler(CommandHandler("givedonate", givedonate))
    application.add_handler(CommandHandler("ban", ban))
    application.add_handler(CommandHandler("unban", unban))
    application.add_handler(CommandHandler("search", search))
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    application.add_handler(CommandHandler("setgladmin", setgladmin))
    application.add_handler(CommandHandler("logs", logs))
    
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")
    print("üëë –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @FrapelloGello")
    application.run_polling()

if __name__ == '__main__':
    main()
