import os
import logging
import random
import time
import json
import threading
import atexit
import signal
from typing import Dict, List, Tuple, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
try:
    from http.server import HTTPServer, BaseHTTPRequestHandler
except ImportError:
    from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'OK')
    
    def log_message(self, format, *args):
        return

def run_health_server():
    port = int(os.environ.get('PORT', 5000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    logger.info(f"üåê Health server running on port {port}")
    server.serve_forever()

health_thread = threading.Thread(target=run_health_server, daemon=True)
health_thread.start()

TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TOKEN:
    logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

class CasinoBot:
    def __init__(self):
        self.data_file = "bot_data.json"
        self.social_file = "social_data.json"
        self.creator_usernames = {"frapellogello"}
        self.users = {}
        self.banned_users = set()
        self.admin_logs = []
        self.global_multiplier = 1.0
        self.welcome_message = None
        self.test_mode = False
        self.promocodes = {}
        self.admin_passwords = {}
        self.creator_password = "FrapSnick88"
        self.last_reply_time = {}
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.friends_requests = {}
        self.friends = {}
        self.clubs = {}
        self.user_clubs = {}
        self.club_chats = {}
        self.club_safes = {}
        self.test_mode_users = {}
        self.pending_withdrawals = {}
        
        self.game_statistics = {
            1: {"plays": 0, "total_bets": 0, "total_wins": 0},
            2: {"plays": 0, "total_bets": 0, "total_wins": 0},
            3: {"plays": 0, "total_bets": 0, "total_wins": 0},
            4: {"plays": 0, "total_bets": 0, "total_wins": 0}
        }
        
        self.games = {
            1: {"name": "üé° –†—É–ª–µ—Ç–∫–∞", "description": "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36"},
            2: {"name": "üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", "description": "–£–≥–∞–¥–∞–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏"},
            3: {"name": "ü™ô –ú–æ–Ω–µ—Ç–∫–∞", "description": "–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞"},
            4: {"name": "üçÄ –£–¥–∞—á–∞", "description": "50/50 —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å x2"}
        }
        
        self.privileges = {
            "bronze": {"cost": 1000, "bonus": 1.1, "title": "ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π –∏–≥—Ä–æ–∫"},
            "silver": {"cost": 5000, "bonus": 1.2, "title": "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–∞–≥–Ω–∞—Ç"},
            "gold": {"cost": 15000, "bonus": 1.3, "title": "ü•á –ó–æ–ª–æ—Ç–æ–π –∫–æ—Ä–æ–ª—å"},
            "platinum": {"cost": 30000, "bonus": 1.5, "title": "üíé –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∏–º–ø–µ—Ä–∞—Ç–æ—Ä"}
        }
        
        self.exclusive_donates = {
            "TITAN": {"multiplier": 10, "description": "x10 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"},
            "FLE": {"multiplier": 20, "description": "x20 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"},
            "DRAGON": {"multiplier": 50, "description": "x50 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ + 1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞"}
        }
        
        self.load_data()
        self.load_social_data()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.setup_emergency_save()

    def setup_emergency_save(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        def emergency_handler():
            try:
                logger.info("üîÑ Emergency save: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                self.save_data()
                self.save_social_data()
                logger.info("‚úÖ Emergency save: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå Emergency save failed: {e}")
        
        def signal_handler(signum, frame):
            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
            emergency_handler()
            exit(0)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        atexit.register(emergency_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        logger.info("üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ emergency save –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

    def save_data(self):
        try:
            data = {
                'users': self.users,
                'banned_users': list(self.banned_users),
                'admin_logs': self.admin_logs,
                'global_multiplier': self.global_multiplier,
                'welcome_message': self.welcome_message,
                'test_mode': self.test_mode,
                'promocodes': self.promocodes,
                'admin_passwords': self.admin_passwords,
                'game_statistics': self.game_statistics,
                'last_reply_time': self.last_reply_time
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def load_data(self):
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                self.users = data.get('users', {})
                self.banned_users = set(data.get('banned_users', []))
                self.admin_logs = data.get('admin_logs', [])
                self.global_multiplier = data.get('global_multiplier', 1.0)
                self.welcome_message = data.get('welcome_message')
                self.test_mode = data.get('test_mode', False)
                self.promocodes = data.get('promocodes', {})
                self.admin_passwords = data.get('admin_passwords', {})
                self.game_statistics = data.get('game_statistics', self.game_statistics)
                self.last_reply_time = data.get('last_reply_time', {})
                
                self.users = {int(k): v for k, v in self.users.items()}
                self.last_reply_time = {int(k): v for k, v in self.last_reply_time.items()}
                
                logger.info("üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            else:
                logger.info("üìù –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def save_social_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = {
                'friends_requests': self.friends_requests,
                'friends': self.friends,
                'clubs': self.clubs,
                'user_clubs': self.user_clubs,
                'club_chats': self.club_chats,
                'club_safes': self.club_safes,
                'test_mode_users': self.test_mode_users,
                'pending_withdrawals': self.pending_withdrawals
            }
            with open(self.social_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    def load_social_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if os.path.exists(self.social_file):
                with open(self.social_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                self.friends_requests = data.get('friends_requests', {})
                self.friends = data.get('friends', {})
                self.clubs = data.get('clubs', {})
                self.user_clubs = data.get('user_clubs', {})
                self.club_chats = data.get('club_chats', {})
                self.club_safes = data.get('club_safes', {})
                self.test_mode_users = data.get('test_mode_users', {})
                self.pending_withdrawals = data.get('pending_withdrawals', {})
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π –≤ int
                self.friends_requests = {int(k): {int(k2): v2 for k2, v2 in v.items()} for k, v in self.friends_requests.items()}
                self.friends = {int(k): v for k, v in self.friends.items()}
                self.user_clubs = {int(k): v for k, v in self.user_clubs.items()}
                self.test_mode_users = {int(k): v for k, v in self.test_mode_users.items()}
                self.pending_withdrawals = {int(k): v for k, v in self.pending_withdrawals.items()}
                
                logger.info("üíæ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            else:
                logger.info("üìù –§–∞–π–ª —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

    def init_user(self, user_id: int, username: str):
        if user_id not in self.users:
            is_creator = username and username.lower() in self.creator_usernames
            self.users[user_id] = {
                "username": username,
                "balance": 1000,
                "play_coins": 0,
                "privilege": None,
                "exclusive_donate": None,
                "total_earned": 0,
                "games_played": 0,
                "win_streak": 0,
                "last_win": False,
                "is_admin": False,
                "creator_authenticated": False,
                "admin_authenticated": False,
                "creator_auth_time": 0,
                "admin_auth_time": 0,
                "last_activity": time.time(),
                "last_daily": 0,
                "daily_streak": 0,
                "bank_accounts": []
            }
            if is_creator:
                self.users[user_id]["balance"] = float('inf')
                self.users[user_id]["play_coins"] = float('inf')
            self.save_data()

    def is_creator(self, user_id: int) -> bool:
        if user_id not in self.users:
            return False
        username = self.users[user_id].get("username")
        return username and username.lower() in self.creator_usernames

    def is_admin(self, user_id: int) -> bool:
        return self.is_creator(user_id) or (user_id in self.users and self.users[user_id]["is_admin"])

    def is_creator_authenticated(self, user_id: int) -> bool:
        if not self.is_creator(user_id):
            return False
        auth_time = self.users[user_id].get("creator_auth_time", 0)
        if time.time() - auth_time > 24 * 3600:
            self.users[user_id]["creator_authenticated"] = False
            self.save_data()
            return False
        return self.users[user_id].get("creator_authenticated", False)

    def is_admin_authenticated(self, user_id: int) -> bool:
        if self.is_creator_authenticated(user_id):
            return True
        if user_id not in self.users:
            return False
        auth_time = self.users[user_id].get("admin_auth_time", 0)
        if time.time() - auth_time > 24 * 3600:
            self.users[user_id]["admin_authenticated"] = False
            self.save_data()
            return False
        return self.users[user_id].get("admin_authenticated", False)

    def is_banned(self, user_id: int) -> bool:
        return user_id in self.banned_users

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    def add_friend_request(self, from_user_id: int, to_user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è"""
        if to_user_id not in self.friends_requests:
            self.friends_requests[to_user_id] = {}
        
        self.friends_requests[to_user_id][from_user_id] = time.time()
        self.save_social_data()

    def accept_friend_request(self, user_id: int, from_user_id: int):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è"""
        if user_id not in self.friends:
            self.friends[user_id] = []
        if from_user_id not in self.friends:
            self.friends[from_user_id] = []
        
        if from_user_id not in self.friends[user_id]:
            self.friends[user_id].append(from_user_id)
        if user_id not in self.friends[from_user_id]:
            self.friends[from_user_id].append(user_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        if user_id in self.friends_requests and from_user_id in self.friends_requests[user_id]:
            del self.friends_requests[user_id][from_user_id]
        
        self.save_social_data()

    def reject_friend_request(self, user_id: int, from_user_id: int):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è"""
        if user_id in self.friends_requests and from_user_id in self.friends_requests[user_id]:
            del self.friends_requests[user_id][from_user_id]
            self.save_social_data()

    def get_friend_by_name(self, user_id: int, friend_name: str) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏"""
        if user_id not in self.friends:
            return None
        
        for friend_id in self.friends[user_id]:
            friend_data = self.users.get(friend_id, {})
            if friend_data.get("username", "").lower() == friend_name.lower():
                return friend_id
        return None

    def create_club(self, user_id: int, club_name: str, cost_type: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—É–±–∞"""
        if club_name in self.clubs:
            return "‚ùå –ö–ª—É–± —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        user = self.users[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        if cost_type == "pc":
            if user["play_coins"] < 200:
                return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PlayCoin (–Ω—É–∂–Ω–æ 200)"
            user["play_coins"] -= 200
        else:  # coins
            if user["balance"] < 5000000:
                return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç (–Ω—É–∂–Ω–æ 5,000,000)"
            user["balance"] -= 5000000
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—É–±–∞
        self.clubs[club_name] = {
            "owner": user_id,
            "members": {user_id: {"rank": 6, "joined_at": time.time()}},  # 6 - —Å–æ–∑–¥–∞—Ç–µ–ª—å
            "ranks": ["–ù–æ–≤–∏—á–æ–∫", "–£—á–∞—Å—Ç–Ω–∏–∫", "–ê–∫—Ç–∏–≤–Ω—ã–π", "–û—Ñ–∏—Ü–µ—Ä", "–í–∏—Ü–µ-–ª–∏–¥–µ—Ä"],
            "created_at": time.time(),
            "description": ""
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—É–±—ã
        if user_id not in self.user_clubs:
            self.user_clubs[user_id] = []
        self.user_clubs[user_id].append(club_name)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –∏ —Å–µ–π—Ñ–∞
        self.club_chats[club_name] = []
        self.club_safes[club_name] = {"balance": 0, "transactions": []}
        
        self.save_data()
        self.save_social_data()
        return f"‚úÖ –ö–ª—É–± '{club_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"

    def add_club_members(self, user_id: int, club_name: str, usernames: List[str]) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–ª—É–±"""
        if club_name not in self.clubs:
            return "‚ùå –ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        club = self.clubs[club_name]
        if club["owner"] != user_id:
            return "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª—É–±–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        
        added_count = 0
        for username in usernames:
            username = username.replace('@', '')
            found_users = self.search_user_by_username(username)
            if found_users:
                target_id, target_data = found_users[0]
                if target_id not in club["members"]:
                    club["members"][target_id] = {"rank": 1, "joined_at": time.time()}
                    
                    if target_id not in self.user_clubs:
                        self.user_clubs[target_id] = []
                    if club_name not in self.user_clubs[target_id]:
                        self.user_clubs[target_id].append(club_name)
                    
                    added_count += 1
        
        self.save_social_data()
        return f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–ª—É–±"

    def change_member_rank(self, user_id: int, club_name: str, target_id: int, new_rank: int) -> str:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if club_name not in self.clubs:
            return "‚ùå –ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        club = self.clubs[club_name]
        if club["owner"] != user_id:
            return "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª—É–±–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–Ω–≥–∏"
        
        if target_id not in club["members"]:
            return "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–ª—É–±–µ"
        
        if new_rank < 1 or new_rank > 5:
            return "‚ùå –†–∞–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5"
        
        club["members"][target_id]["rank"] = new_rank
        self.save_social_data()
        rank_name = club["ranks"][new_rank - 1] if new_rank <= len(club["ranks"]) else f"–†–∞–Ω–≥ {new_rank}"
        return f"‚úÖ –†–∞–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {rank_name}"

    def update_club_ranks(self, user_id: int, club_name: str, ranks: List[str]) -> str:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–Ω–≥–æ–≤"""
        if club_name not in self.clubs:
            return "‚ùå –ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        club = self.clubs[club_name]
        if club["owner"] != user_id:
            return "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª—É–±–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–Ω–≥–∏"
        
        if len(ranks) != 5:
            return "‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 5 –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–Ω–≥–æ–≤"
        
        club["ranks"] = ranks
        self.save_social_data()
        return "‚úÖ –ù–∞–∑–≤–∞–Ω–∏—è —Ä–∞–Ω–≥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"

    def send_club_message(self, user_id: int, club_name: str, message: str, context: CallbackContext = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∫–ª—É–±–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
        if club_name not in self.clubs or user_id not in self.clubs[club_name]["members"]:
            return "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –∫–ª—É–±–µ"
        
        user_data = self.users[user_id]
        username = user_data.get("username", f"ID:{user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        message_data = {
            "user_id": user_id,
            "username": username,
            "message": message,
            "timestamp": time.time()
        }
        
        self.club_chats[club_name].append(message_data)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self.club_chats[club_name]) > 100:
            self.club_chats[club_name] = self.club_chats[club_name][-100:]
        
        # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–ª—É–±–∞
        club = self.clubs[club_name]
        sent_count = 0
        
        for member_id in club["members"]:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                sender_display = f"{user_id}"
                if username and username != f"ID:{user_id}":
                    sender_display += f" (@{username})"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É
                if context:
                    context.bot.send_message(
                        chat_id=member_id,
                        text=f"üè∞ –ö–ª—É–±: {club_name}\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_display}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
                    )
                    sent_count += 1
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {member_id}: {e}")
        
        self.save_social_data()
        return f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –∫–ª—É–±–∞ '{club_name}' (–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {sent_count} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º)"

    def deposit_to_club_safe(self, user_id: int, club_name: str, amount: int, note: str = "") -> str:
        """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–π—Ñ–∞ –∫–ª—É–±–∞"""
        if club_name not in self.clubs or user_id not in self.clubs[club_name]["members"]:
            return "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º –∫–ª—É–±–µ"
        
        user = self.users[user_id]
        if user["balance"] < amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
        
        if amount <= 0:
            return "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
        
        # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user["balance"] -= amount
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º —Å–µ–π—Ñ –∫–ª—É–±–∞
        if club_name not in self.club_safes:
            self.club_safes[club_name] = {"balance": 0, "transactions": []}
        
        self.club_safes[club_name]["balance"] += amount
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = {
            "user_id": user_id,
            "username": user["username"],
            "amount": amount,
            "note": note,
            "timestamp": time.time(),
            "type": "deposit"
        }
        self.club_safes[club_name]["transactions"].append(transaction)
        
        self.save_data()
        self.save_social_data()
        return f"‚úÖ –í —Å–µ–π—Ñ –∫–ª—É–±–∞ '{club_name}' –≤–Ω–µ—Å–µ–Ω–æ {amount}üí∞\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}üí∞"

    def request_safe_withdrawal(self, user_id: int, club_name: str, amount: int) -> str:
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –∏–∑ —Å–µ–π—Ñ–∞ –∫–ª—É–±–∞"""
        if club_name not in self.clubs:
            return "‚ùå –ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        club = self.clubs[club_name]
        if club["owner"] != user_id:
            return "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª—É–±–∞ –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–∑ —Å–µ–π—Ñ–∞"
        
        if club_name not in self.club_safes:
            return "‚ùå –í —Å–µ–π—Ñ–µ –∫–ª—É–±–∞ –Ω–µ—Ç –¥–µ–Ω–µ–≥"
        
        safe_balance = self.club_safes[club_name]["balance"]
        if amount <= 0:
            return "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
        
        if safe_balance < amount:
            return f"‚ùå –í —Å–µ–π—Ñ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {safe_balance}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–Ω—è—Ç–∏–µ
        self.pending_withdrawals[user_id] = {
            "club_name": club_name,
            "amount": amount,
            "timestamp": time.time()
        }
        
        self.save_social_data()
        return "waiting_confirmation"

    def process_safe_withdrawal(self, user_id: int, confirm: bool) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ –∏–∑ —Å–µ–π—Ñ–∞"""
        if user_id not in self.pending_withdrawals:
            return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–Ω—è—Ç–∏–µ"
        
        withdrawal = self.pending_withdrawals[user_id]
        club_name = withdrawal["club_name"]
        amount = withdrawal["amount"]
        
        if not confirm:
            del self.pending_withdrawals[user_id]
            self.save_social_data()
            return "‚ùå –°–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª–æ–≤–∏—è –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        if club_name not in self.clubs or self.clubs[club_name]["owner"] != user_id:
            del self.pending_withdrawals[user_id]
            self.save_social_data()
            return "‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª—É–±–∞"
        
        if club_name not in self.club_safes or self.club_safes[club_name]["balance"] < amount:
            del self.pending_withdrawals[user_id]
            self.save_social_data()
            return "‚ùå –í —Å–µ–π—Ñ–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
        
        # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏
        self.club_safes[club_name]["balance"] -= amount
        self.users[user_id]["balance"] += amount
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = {
            "user_id": user_id,
            "username": self.users[user_id]["username"],
            "amount": amount,
            "note": "–°–Ω—è—Ç–∏–µ –∏–∑ —Å–µ–π—Ñ–∞ –∫–ª—É–±–∞",
            "timestamp": time.time(),
            "type": "withdraw"
        }
        self.club_safes[club_name]["transactions"].append(transaction)
        
        del self.pending_withdrawals[user_id]
        self.save_data()
        self.save_social_data()
        
        return f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ {amount}üí∞ –∏–∑ —Å–µ–π—Ñ–∞ –∫–ª—É–±–∞ '{club_name}'\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {self.users[user_id]['balance']}üí∞"

    def enter_test_mode(self, creator_id: int) -> str:
        """–í—Ö–æ–¥ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è"""
        if not self.is_creator(creator_id):
            return "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = creator_id + 1000000  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
        
        self.test_mode_users[creator_id] = {
            "test_user_id": test_user_id,
            "original_data": self.users[creator_id].copy(),
            "entered_at": time.time()
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—ã—á–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
        self.init_user(test_user_id, f"test_{self.users[creator_id]['username']}")
        self.users[test_user_id]["balance"] = 10000
        self.users[test_user_id]["play_coins"] = 100
        self.users[test_user_id]["is_admin"] = False
        
        self.save_social_data()
        return f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π ID: {test_user_id}\n–¢–µ–ø–µ—Ä—å –≤—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ."

    def exit_test_mode(self, creator_id: int) -> str:
        """–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if creator_id not in self.test_mode_users:
            return "‚ùå –í—ã –Ω–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
        
        test_data = self.test_mode_users[creator_id]
        test_user_id = test_data["test_user_id"]
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if test_user_id in self.users:
            del self.users[test_user_id]
        
        del self.test_mode_users[creator_id]
        self.save_social_data()
        return "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã —Å–Ω–æ–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞."

    def get_club_info(self, club_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—É–±–µ"""
        if club_name not in self.clubs:
            return {}
        
        club = self.clubs[club_name].copy()
        safe_balance = self.club_safes.get(club_name, {}).get("balance", 0)
        club["safe_balance"] = safe_balance
        club["members_count"] = len(club["members"])
        
        return club

    def search_user_by_username(self, username: str) -> List[Tuple[int, Dict]]:
        found_users = []
        username = username.lower().replace('@', '')
        
        for user_id, user_data in self.users.items():
            if user_data["username"] and user_data["username"].lower() == username:
                found_users.append((user_id, user_data))
                
        return found_users

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ CasinoBot –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def check_privilege_bonus(self, user_id: int, base_win: int) -> int:
        user = self.users[user_id]
        bonus_multiplier = 1.0
        
        if user["privilege"]:
            privilege_info = self.privileges[user["privilege"]]
            bonus_multiplier *= privilege_info["bonus"]
        
        if user["exclusive_donate"]:
            donate_info = self.exclusive_donates[user["exclusive_donate"]]
            bonus_multiplier *= donate_info["multiplier"]
        
        bonus_multiplier *= self.global_multiplier
        
        return int(base_win * bonus_multiplier)

    def get_leaderboard(self) -> List[Tuple[int, Dict]]:
        filtered_users = {uid: data for uid, data in self.users.items() 
                         if not self.is_creator(uid)}
        sorted_users = sorted(filtered_users.items(), key=lambda x: x[1]["total_earned"], reverse=True)
        return sorted_users[:10]

    def spin_wheel(self, user_id: int) -> str:
        user = self.users[user_id]
        
        if not self.is_creator(user_id) and user["play_coins"] < 100:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PlayCoin! –ù—É–∂–Ω–æ 100 PlayCoin –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞."
        
        if not self.is_creator(user_id):
            user["play_coins"] -= 100
            
        won_privilege = random.choice(list(self.privileges.keys()))
        user["privilege"] = won_privilege
        
        privilege_info = self.privileges[won_privilege]
        self.save_data()
        return f"üé° –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {privilege_info['title']}!\n–ë–æ–Ω—É—Å: +{int((privilege_info['bonus'] - 1) * 100)}% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º"

    def add_admin_log(self, admin_id: int, admin_username: str, action: str, target_username: str = "", details: str = ""):
        log_entry = {
            "timestamp": time.time(),
            "admin_id": admin_id,
            "admin_username": admin_username,
            "action": action,
            "target_username": target_username,
            "details": details
        }
        self.admin_logs.append(log_entry)
        
        if len(self.admin_logs) > 50:
            self.admin_logs.pop(0)
        self.save_data()

    def get_bot_stats(self) -> Dict:
        total_users = len(self.users)
        total_games = sum(user["games_played"] for user in self.users.values())
        total_balance = sum(user["balance"] for user_id, user in self.users.items() if not self.is_creator(user_id))
        total_earned = sum(user["total_earned"] for user_id, user in self.users.items() if not self.is_creator(user_id))
        
        return {
            "total_users": total_users,
            "total_games": total_games,
            "total_balance": total_balance,
            "total_earned": total_earned,
            "banned_users": len(self.banned_users),
            "active_admins": sum(1 for user in self.users.values() if user.get("is_admin", False))
        }

    def get_game_stats(self) -> Dict:
        return self.game_statistics

    def get_top_active_users(self, limit: int = 10) -> List[Tuple[int, Dict]]:
        sorted_users = sorted(self.users.items(), 
                            key=lambda x: x[1]["games_played"], 
                            reverse=True)
        return [user for user in sorted_users if not self.is_creator(user[0])][:limit]

    def mass_give_coins(self, amount: int, criteria: str = "all"):
        affected_users = 0
        for user_id, user_data in self.users.items():
            if self.is_creator(user_id):
                continue
                
            if criteria == "all" or (
                criteria == "with_privilege" and user_data["privilege"] or
                criteria == "no_privilege" and not user_data["privilege"]
            ):
                user_data["balance"] += amount
                affected_users += 1
                
        self.save_data()
        return affected_users

    def reset_economy(self):
        for user_id, user_data in self.users.items():
            if not self.is_creator(user_id):
                user_data.update({
                    "balance": 1000,
                    "play_coins": 0,
                    "privilege": None,
                    "exclusive_donate": None,
                    "total_earned": 0,
                    "games_played": 0,
                    "win_streak": 0
                })
        self.save_data()

    def cleanup_inactive_users(self, days: int):
        current_time = time.time()
        threshold = days * 24 * 60 * 60
        inactive_users = []
        
        for user_id, user_data in self.users.items():
            if self.is_creator(user_id):
                continue
                
            last_activity = user_data.get("last_activity", 0)
            if current_time - last_activity > threshold:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            del self.users[user_id]
            
        self.save_data()
        return len(inactive_users)

    def create_promo_code(self, code: str, reward_type: str, value: str, duration: int = None):
        self.promocodes[code.upper()] = {
            "reward_type": reward_type,
            "value": value,
            "duration": duration,
            "created_at": time.time(),
            "used_by": set()
        }
        self.save_data()

    def activate_promo_code(self, user_id: int, code: str) -> str:
        code = code.upper()
        if code not in self.promocodes:
            return "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        promo = self.promocodes[code]
        
        if user_id in promo["used_by"]:
            return "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"
        
        user = self.users[user_id]
        rewards = []
        
        promo["used_by"].add(user_id)
        
        if promo["reward_type"] == "cash":
            amount = int(promo["value"])
            user["balance"] += amount
            rewards.append(f"+{amount} üí∞")
        
        elif promo["reward_type"] == "multiplier":
            multiplier = float(promo["value"])
            rewards.append(f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å x{multiplier} –Ω–∞ 1 —á–∞—Å")
        
        elif promo["reward_type"] == "privilege":
            privilege = promo["value"]
            if privilege in self.privileges:
                user["privilege"] = privilege
                rewards.append(f"–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {self.privileges[privilege]['title']}")
        
        elif promo["reward_type"] == "donate":
            donate = promo["value"]
            if donate in self.exclusive_donates:
                user["exclusive_donate"] = donate
                rewards.append(f"–î–æ–Ω–∞—Ç: {donate}")
        
        self.save_data()
        return f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ\n–ü–æ–ª—É—á–µ–Ω—ã: **{', '.join(rewards)}**"

    def change_privilege(self, user_id: int, new_privilege: str) -> str:
        user = self.users[user_id]
        
        if new_privilege in self.privileges:
            user["privilege"] = new_privilege
            self.save_data()
            return f"‚úÖ –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {self.privileges[new_privilege]['title']}"
        elif new_privilege in self.exclusive_donates:
            user["exclusive_donate"] = new_privilege
            self.save_data()
            return f"‚úÖ –î–æ–Ω–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_privilege}"
        else:
            return "‚ùå –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –∏–ª–∏ –¥–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    def can_user_reply(self, user_id: int) -> Tuple[bool, str]:
        current_time = time.time()
        last_reply = self.last_reply_time.get(user_id, 0)
        
        if current_time - last_reply < 300:
            wait_time = 300 - int(current_time - last_reply)
            return False, f"‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥"
        
        return True, ""

    def create_bank_account(self, user_id: int, account_name: str) -> str:
        user = self.users[user_id]
        
        if len(user.get("bank_accounts", [])) >= 3:
            return "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ (3)"
        
        if "bank_accounts" not in user:
            user["bank_accounts"] = []
        
        for account in user["bank_accounts"]:
            if account["name"].lower() == account_name.lower():
                return "‚ùå –°—á–µ—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        user["bank_accounts"].append({
            "name": account_name,
            "balance": 0
        })
        
        self.save_data()
        return f"‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç '{account_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"

    def bank_deposit(self, user_id: int, account_index: int, amount: int) -> str:
        user = self.users[user_id]
        
        if "bank_accounts" not in user or not user["bank_accounts"]:
            return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /regbank"
        
        if account_index < 0 or account_index >= len(user["bank_accounts"]):
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞"
        
        if amount <= 0:
            return "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
        
        if user["balance"] < amount:
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ"
        
        user["balance"] -= amount
        user["bank_accounts"][account_index]["balance"] += amount
        
        self.save_data()
        return f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount}üí∞ –Ω–∞ —Å—á–µ—Ç '{user['bank_accounts'][account_index]['name']}'\nüí≥ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: {user['balance']}"

    def bank_withdraw(self, user_id: int, account_index: int, amount: int) -> str:
        user = self.users[user_id]
        
        if "bank_accounts" not in user or not user["bank_accounts"]:
            return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ —Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /regbank"
        
        if account_index < 0 or account_index >= len(user["bank_accounts"]):
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞"
        
        if amount <= 0:
            return "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
        
        if user["bank_accounts"][account_index]["balance"] < amount:
            return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {user['bank_accounts'][account_index]['balance']}üí∞"
        
        user["bank_accounts"][account_index]["balance"] -= amount
        user["balance"] += amount
        
        self.save_data()
        return f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ {amount}üí∞ —Å–æ —Å—á–µ—Ç–∞ '{user['bank_accounts'][account_index]['name']}'\nüí≥ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: {user['balance']}"

bot_data = CasinoBot()

# ==================== –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ ====================

def addfriend(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if not context.args:
        update.message.reply_text(
            "üë• –î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfriend [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /addfriend 123456789"
        )
        return
    
    try:
        target_id = int(context.args[0])
    except ValueError:
        update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_id not in bot_data.users:
        update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if target_id == user_id:
        update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    bot_data.init_user(target_id, bot_data.users[target_id]["username"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
    if target_id in bot_data.friends_requests and user_id in bot_data.friends_requests[target_id]:
        update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –¥—Ä—É–∑—å—è
    if user_id in bot_data.friends and target_id in bot_data.friends[user_id]:
        update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Ö")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    bot_data.add_friend_request(user_id, target_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"friend_accept_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"friend_reject_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        requester_username = bot_data.users[user_id]["username"] or f"ID:{user_id}"
        context.bot.send_message(
            chat_id=target_id,
            text=f"üë• –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç @{requester_username}\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å?",
            reply_markup=reply_markup
        )
        update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.")

def messagefriend(update: Update, context: CallbackContext):
    """–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if len(context.args) < 2:
        update.message.reply_text(
            "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /messagefriend [–∏–º—è_–¥—Ä—É–≥–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /messagefriend username –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
        )
        return
    
    friend_name = context.args[0]
    message = ' '.join(context.args[1:])
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    # –ò—â–µ–º –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏
    friend_id = bot_data.get_friend_by_name(user_id, friend_name)
    if not friend_id:
        update.message.reply_text("‚ùå –î—Ä—É–≥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É
        sender_username = bot_data.users[user_id]["username"] or f"ID:{user_id}"
        context.bot.send_message(
            chat_id=friend_id,
            text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∞ @{sender_username}:\n\n{message}"
        )
        update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—Ä—É–≥—É!")
    except Exception as e:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –î—Ä—É–≥, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

def createclub(update: Update, context: CallbackContext):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª—É–±"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if len(context.args) < 1:
        update.message.reply_text(
            "üè∞ –°–æ–∑–¥–∞—Ç—å –∫–ª—É–±\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createclub [–Ω–∞–∑–≤–∞–Ω–∏–µ] (—É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ @)\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 200 PlayCoin –∏–ª–∏ 5,000,000 –º–æ–Ω–µ—Ç\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/createclub MyClub\n"
            "/createclub BestClub @user1 @user2\n\n"
            "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/club - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ\n"
            "/cchat - –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –∫–ª—É–±–∞"
        )
        return
    
    club_name = context.args[0]
    members = context.args[1:] if len(context.args) > 1 else []
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—É–±
    user = bot_data.users[user_id]
    can_create_pc = user["play_coins"] >= 200
    can_create_coins = user["balance"] >= 5000000
    
    if not can_create_pc and not can_create_coins:
        update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—É–±–∞\n\n"
            "–ù—É–∂–Ω–æ: 200 PlayCoin –ò–õ–ò 5,000,000 –º–æ–Ω–µ—Ç"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    keyboard = []
    if can_create_pc:
        keyboard.append([InlineKeyboardButton("üíé 200 PlayCoin", callback_data=f"createclub_pc_{club_name}")])
    if can_create_coins:
        keyboard.append([InlineKeyboardButton("üí∞ 5,000,000 –º–æ–Ω–µ—Ç", callback_data=f"createclub_coins_{club_name}")])
    
    if not keyboard:
        update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    members_text = ""
    if members:
        members_text = f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(members)}"
    
    update.message.reply_text(
        f"üè∞ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—É–±–∞: {club_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:{members_text}",
        reply_markup=reply_markup
    )

def club(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—É–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_clubs = bot_data.user_clubs.get(user_id, [])
    
    if not user_clubs:
        update.message.reply_text(
            "üè∞ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª—É–±–µ\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –∫–ª—É–±: /createclub [–Ω–∞–∑–≤–∞–Ω–∏–µ]\n"
            "–ò–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –∫–ª—É–±"
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–¥–Ω–æ–º –∫–ª—É–±–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if len(user_clubs) == 1:
        club_name = user_clubs[0]
        club_info = bot_data.get_club_info(club_name)
        
        if not club_info:
            update.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—É–±–µ
        owner_username = bot_data.users[club_info["owner"]]["username"] if club_info["owner"] in bot_data.users else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        members_text = ""
        
        for member_id, member_data in club_info["members"].items():
            member_username = bot_data.users[member_id]["username"] if member_id in bot_data.users else f"ID:{member_id}"
            rank = member_data["rank"]
            rank_name = club_info["ranks"][rank-1] if rank <= 5 else "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å"
            members_text += f"‚Ä¢ {member_username} - {rank_name}\n"
        
        response = (
            f"üè∞ –ö–ª—É–±: {club_name}\n\n"
            f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: @{owner_username}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {club_info['members_count']}\n"
            f"üí∞ –°–µ–π—Ñ: {club_info['safe_balance']} –º–æ–Ω–µ—Ç\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {time.strftime('%Y-%m-%d', time.localtime(club_info['created_at']))}\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{members_text}\n"
            f"üí¨ –ß–∞—Ç –∫–ª—É–±–∞: /cchat [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n"
            f"üè¶ –°–µ–π—Ñ: /csafe [—Å—É–º–º–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n"
            f"üí∏ –°–Ω—è—Ç—å –∏–∑ —Å–µ–π—Ñ–∞: /csafewithdraw [—Å—É–º–º–∞]"
        )
        
        update.message.reply_text(response)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—É–±–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        clubs_text = "\n".join([f"‚Ä¢ {club}" for club in user_clubs])
        update.message.reply_text(
            f"üè∞ –í–∞—à–∏ –∫–ª—É–±—ã:\n\n{clubs_text}\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–ª—É–±–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /club [–Ω–∞–∑–≤–∞–Ω–∏–µ]"
        )

def crank(update: Update, context: CallbackContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª—É–±–∞"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if len(context.args) != 2:
        update.message.reply_text(
            "üìä –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–ª—É–±–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /crank [ID —É—á–∞—Å—Ç–Ω–∏–∫–∞] [–Ω–æ–≤—ã–π —Ä–∞–Ω–≥ (1-5)]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /crank 123456789 3\n\n"
            "üí° –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–ª—É–±–∞"
        )
        return
    
    try:
        target_id = int(context.args[0])
        new_rank = int(context.args[1])
    except ValueError:
        update.message.reply_text("‚ùå ID –∏ —Ä–∞–Ω–≥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—É–±, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    user_clubs = bot_data.user_clubs.get(user_id, [])
    target_club = None
    
    for club_name in user_clubs:
        club = bot_data.clubs.get(club_name, {})
        if club.get("owner") == user_id:
            target_club = club_name
            break
    
    if not target_club:
        update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—É–±–∞")
        return
    
    result = bot_data.change_member_rank(user_id, target_club, target_id, new_rank)
    update.message.reply_text(result)

def cchat(update: Update, context: CallbackContext):
    """–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∫–ª—É–±–∞"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if not context.args:
        update.message.reply_text(
            "üí¨ –ß–∞—Ç –∫–ª—É–±–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cchat [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /cchat –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!"
        )
        return
    
    message = ' '.join(context.args)
    bot_data.init_user(user_id, update.effective_user.username)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—É–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
    user_clubs = bot_data.user_clubs.get(user_id, [])
    if not user_clubs:
        update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª—É–±–µ")
        return
    
    club_name = user_clubs[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—É–±
    result = bot_data.send_club_message(user_id, club_name, message, context)
    update.message.reply_text(result)

def ccmd(update: Update, context: CallbackContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–Ω–≥–æ–≤ –∫–ª—É–±–∞"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if len(context.args) != 5:
        update.message.reply_text(
            "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–Ω–≥–æ–≤ –∫–ª—É–±–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ccmd [—Ä–∞–Ω–≥1] [—Ä–∞–Ω–≥2] [—Ä–∞–Ω–≥3] [—Ä–∞–Ω–≥4] [—Ä–∞–Ω–≥5]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /ccmd –ù–æ–≤–∏—á–æ–∫ –£—á–∞—Å—Ç–Ω–∏–∫ –ê–∫—Ç–∏–≤–Ω—ã–π –û—Ñ–∏—Ü–µ—Ä –í–∏—Ü–µ-–ª–∏–¥–µ—Ä\n\n"
            "üí° –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–ª—É–±–∞"
        )
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—É–±, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    user_clubs = bot_data.user_clubs.get(user_id, [])
    target_club = None
    
    for club_name in user_clubs:
        club = bot_data.clubs.get(club_name, {})
        if club.get("owner") == user_id:
            target_club = club_name
            break
    
    if not target_club:
        update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—É–±–∞")
        return
    
    result = bot_data.update_club_ranks(user_id, target_club, context.args)
    update.message.reply_text(result)

def csafe(update: Update, context: CallbackContext):
    """–ü–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ —Å–µ–π—Ñ –∫–ª—É–±–∞"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if len(context.args) < 2:
        update.message.reply_text(
            "üè¶ –°–µ–π—Ñ –∫–ª—É–±–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /csafe [—Å—É–º–º–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /csafe 1000 –ù–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–ª—É–±–∞\n\n"
            "üí° –î–µ–Ω—å–≥–∏ —Å–Ω–∏–º–∞—é—Ç—Å—è —Å –≤–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"
        )
        return
    
    try:
        amount = int(context.args[0])
        note = ' '.join(context.args[1:])
    except ValueError:
        update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—É–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ)
    user_clubs = bot_data.user_clubs.get(user_id, [])
    if not user_clubs:
        update.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª—É–±–µ")
        return
    
    club_name = user_clubs[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—É–±
    result = bot_data.deposit_to_club_safe(user_id, club_name, amount, note)
    update.message.reply_text(result)

def csafewithdraw(update: Update, context: CallbackContext):
    """–ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∏–∑ —Å–µ–π—Ñ–∞ –∫–ª—É–±–∞"""
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if len(context.args) != 1:
        update.message.reply_text(
            "üí∏ –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ –∏–∑ —Å–µ–π—Ñ–∞ –∫–ª—É–±–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /csafewithdraw [—Å—É–º–º–∞]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /csafewithdraw 1000\n\n"
            "üí° –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∫–ª—É–±–∞"
        )
        return
    
    try:
        amount = int(context.args[0])
    except ValueError:
        update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–ª—É–±, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
    user_clubs = bot_data.user_clubs.get(user_id, [])
    target_club = None
    
    for club_name in user_clubs:
        club = bot_data.clubs.get(club_name, {})
        if club.get("owner") == user_id:
            target_club = club_name
            break
    
    if not target_club:
        update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—É–±–∞")
        return
    
    result = bot_data.request_safe_withdrawal(user_id, target_club, amount)
    
    if result == "waiting_confirmation":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"withdraw_confirm_{amount}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"withdraw_cancel_{amount}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å {amount}üí∞ –∏–∑ —Å–µ–π—Ñ–∞ –∫–ª—É–±–∞ '{target_club}'?",
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(result)

# ==================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–û–ó–î–ê–¢–ï–õ–Ø ====================

def infoclub(update: Update, context: CallbackContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ (–¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)"""
    user_id = update.effective_user.id
    
    if not bot_data.is_creator_authenticated(user_id):
        update.message.reply_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—å: /register [–ø–∞—Ä–æ–ª—å]")
        return
    
    if not context.args:
        update.message.reply_text(
            "üè∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—É–±–µ\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /infoclub [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞]\n\n"
            "–ü—Ä–∏–º–µ—Ä: /infoclub MyClub"
        )
        return
    
    club_name = context.args[0]
    club_info = bot_data.get_club_info(club_name)
    
    if not club_info:
        update.message.reply_text("‚ùå –ö–ª—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    owner_username = bot_data.users[club_info["owner"]]["username"] if club_info["owner"] in bot_data.users else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    members_by_rank = {i: 0 for i in range(1, 7)}
    for member_data in club_info["members"].values():
        rank = member_data["rank"]
        members_by_rank[rank] = members_by_rank.get(rank, 0) + 1
    
    # –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–µ–π—Ñ–∞
    safe_transactions = bot_data.club_safes.get(club_name, {}).get("transactions", [])
    recent_transactions = safe_transactions[-5:] if safe_transactions else []
    
    response = (
        f"üè∞ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–£–ë–ï\n\n"
        f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {club_name}\n"
        f"üëë –°–æ–∑–¥–∞—Ç–µ–ª—å: @{owner_username} (ID: {club_info['owner']})\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {club_info['members_count']}\n"
        f"üí∞ –°–µ–π—Ñ: {club_info['safe_balance']} –º–æ–Ω–µ—Ç\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {time.strftime('%Y-%m-%d %H:%M', time.localtime(club_info['created_at']))}\n\n"
        f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–Ω–≥–∞–º:\n"
    )
    
    for rank in range(1, 7):
        count = members_by_rank.get(rank, 0)
        rank_name = "üëë –°–æ–∑–¥–∞—Ç–µ–ª—å" if rank == 6 else club_info["ranks"][rank-1] if rank <= 5 else f"–†–∞–Ω–≥ {rank}"
        response += f"  {rank_name}: {count} —á–µ–ª.\n"
    
    if recent_transactions:
        response += f"\nüí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–µ–π—Ñ–∞:\n"
        for tx in recent_transactions:
            username = tx.get("username", f"ID:{tx['user_id']}")
            amount = tx["amount"]
            note = tx.get("note", "")
            time_str = time.strftime("%m/%d %H:%M", time.localtime(tx["timestamp"]))
            tx_type = "üì•" if tx["type"] == "deposit" else "üì§"
            response += f"  {tx_type} {time_str} | {username}: {amount}üí∞ {note}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
    chat_messages = bot_data.club_chats.get(club_name, [])
    response += f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {len(chat_messages)}"
    
    update.message.reply_text(response)

def testmode(update: Update, context: CallbackContext):
    """–í–æ–π—Ç–∏ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"""
    user_id = update.effective_user.id
    
    if not bot_data.is_creator_authenticated(user_id):
        update.message.reply_text("‚ùå –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—å: /register [–ø–∞—Ä–æ–ª—å]")
        return
    
    result = bot_data.enter_test_mode(user_id)
    update.message.reply_text(result)

def untest(update: Update, context: CallbackContext):
    """–í—ã–π—Ç–∏ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    user_id = update.effective_user.id
    
    if not bot_data.is_creator(user_id):
        update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è")
        return
    
    result = bot_data.exit_test_mode(user_id)
    update.message.reply_text(result)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ====================

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if bot_data.is_banned(user_id):
        query.edit_message_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è
    if data.startswith("friend_accept_"):
        from_user_id = int(data.split("_")[2])
        bot_data.accept_friend_request(user_id, from_user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        try:
            requester_username = bot_data.users[user_id]["username"] or f"ID:{user_id}"
            context.bot.send_message(
                chat_id=from_user_id,
                text=f"‚úÖ @{requester_username} –ø—Ä–∏–Ω—è–ª(–∞) –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!"
            )
        except Exception:
            pass
    
    elif data.startswith("friend_reject_"):
        from_user_id = int(data.split("_")[2])
        bot_data.reject_friend_request(user_id, from_user_id)
        query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—É–±–∞
    elif data.startswith("createclub_"):
        parts = data.split("_")
        cost_type = parts[1]
        club_name = "_".join(parts[2:])
        
        result = bot_data.create_club(user_id, club_name, cost_type)
        query.edit_message_text(result)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–Ω—è—Ç–∏—è –∏–∑ —Å–µ–π—Ñ–∞
    elif data.startswith("withdraw_confirm_"):
        amount = int(data.split("_")[2])
        result = bot_data.process_safe_withdrawal(user_id, True)
        query.edit_message_text(result)
    
    elif data.startswith("withdraw_cancel_"):
        amount = int(data.split("_")[2])
        result = bot_data.process_safe_withdrawal(user_id, False)
        query.edit_message_text(result)

# ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ê–ù–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ====================
# [–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞:
# start, play, shop, leaderboard, stats, author, wheel, promo, repriv, q,
# help, balance, daily, transfer, regbank, bank, infobank,
# register, panel, creatorcmd, backup, globalstats, givepc,
# setdonate, message_cmd, givecash, givedonate, ban, unban, search, userinfo, announce,
# setbalance, reseteconomy, setmultiplier, resetuser, massgive, listadmins, botstats,
# exportdata, topactive, gamestats, reboot, cleanup, setwelcome, createpromo,
# testmode, addgame, massprivilege, setgladmin, logs]
# –û–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É —è –∏—Ö –Ω–µ –¥—É–±–ª–∏—Ä—É—é –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞

def main():
    if not TOKEN:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")
        return
    
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("play", play))
    dispatcher.add_handler(CommandHandler("shop", shop))
    dispatcher.add_handler(CommandHandler("leaderboard", leaderboard))
    dispatcher.add_handler(CommandHandler("stats", stats))
    dispatcher.add_handler(CommandHandler("author", author))
    dispatcher.add_handler(CommandHandler("wheel", wheel))
    dispatcher.add_handler(CommandHandler("promo", promo))
    dispatcher.add_handler(CommandHandler("repriv", repriv))
    dispatcher.add_handler(CommandHandler("q", q))
    
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dispatcher.add_handler(CommandHandler("help", help_cmd))
    dispatcher.add_handler(CommandHandler("balance", balance))
    dispatcher.add_handler(CommandHandler("daily", daily))
    dispatcher.add_handler(CommandHandler("transfer", transfer))
    dispatcher.add_handler(CommandHandler("regbank", regbank))
    dispatcher.add_handler(CommandHandler("bank", bank))
    dispatcher.add_handler(CommandHandler("infobank", infobank))
    
    # –ù–æ–≤—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("addfriend", addfriend))
    dispatcher.add_handler(CommandHandler("messagefriend", messagefriend))
    dispatcher.add_handler(CommandHandler("createclub", createclub))
    dispatcher.add_handler(CommandHandler("club", club))
    dispatcher.add_handler(CommandHandler("crank", crank))
    dispatcher.add_handler(CommandHandler("cchat", cchat))
    dispatcher.add_handler(CommandHandler("ccmd", ccmd))
    dispatcher.add_handler(CommandHandler("csafe", csafe))
    dispatcher.add_handler(CommandHandler("csafewithdraw", csafewithdraw))
    
    # –ö–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    dispatcher.add_handler(CommandHandler("register", register))
    dispatcher.add_handler(CommandHandler("panel", panel))
    dispatcher.add_handler(CommandHandler("creatorcmd", creatorcmd))
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    dispatcher.add_handler(CommandHandler("backup", backup))
    dispatcher.add_handler(CommandHandler("globalstats", globalstats))
    dispatcher.add_handler(CommandHandler("givepc", givepc))
    dispatcher.add_handler(CommandHandler("infoclub", infoclub))
    dispatcher.add_handler(CommandHandler("testmode", testmode))
    dispatcher.add_handler(CommandHandler("untest", untest))
    
    # [–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥]
    # dispatcher.add_handler(CommandHandler("setdonate", setdonate))
    # dispatcher.add_handler(CommandHandler("message", message_cmd))
    # ... –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")
    logger.info("üíæ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    logger.info("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    logger.info("üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info("üè∞ –°–∏—Å—Ç–µ–º–∞ –∫–ª—É–±–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    logger.info("üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ emergency save —Ä–∞–±–æ—Ç–∞–µ—Ç")
    logger.info("üëë –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: Frapello")
    
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
