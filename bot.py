import os
import logging
import random
import time
from typing import Dict, List, Tuple
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask
from threading import Thread

app = Flask('')
@app.route('/')
def home(): return "üé∞ Casino Bot is Running!"
Thread(target=lambda: app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))).start()

TOKEN = os.environ.get('TELEGRAM_TOKEN')

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

class CasinoBot:
    def __init__(self):
        self.creator_usernames = {"frapellogello"}
        self.users = {}
        self.banned_users = set()
        self.admin_logs = []
        self.global_multiplier = 1.0
        self.welcome_message = None
        self.test_mode = False
        self.promocodes = {}
        self.game_statistics = {
            1: {"plays": 0, "total_bets": 0, "total_wins": 0},
            2: {"plays": 0, "total_bets": 0, "total_wins": 0},
            3: {"plays": 0, "total_bets": 0, "total_wins": 0}
        }
        
        self.games = {
            1: {"name": "–†—É–ª–µ—Ç–∫–∞", "description": "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36"},
            2: {"name": "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", "description": "–£–≥–∞–¥–∞–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏"},
            3: {"name": "–ú–æ–Ω–µ—Ç–∫–∞", "description": "–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞"}
        }
        self.privileges = {
            "bronze": {"cost": 1000, "bonus": 1.1, "title": "ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π –∏–≥—Ä–æ–∫"},
            "silver": {"cost": 5000, "bonus": 1.2, "title": "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–∞–≥–Ω–∞—Ç"},
            "gold": {"cost": 15000, "bonus": 1.3, "title": "ü•á –ó–æ–ª–æ—Ç–æ–π –∫–æ—Ä–æ–ª—å"},
            "platinum": {"cost": 30000, "bonus": 1.5, "title": "üíé –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∏–º–ø–µ—Ä–∞—Ç–æ—Ä"}
        }
        self.exclusive_donates = {
            "TITAN": {"multiplier": 10, "description": "x10 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"},
            "FLE": {"multiplier": 20, "description": "x20 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"},
            "DRAGON": {"multiplier": 50, "description": "x50 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ + 1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞"}
        }

    def init_user(self, user_id: int, username: str):
        if user_id not in self.users:
            is_creator = username and username.lower() in self.creator_usernames
            self.users[user_id] = {
                "username": username,
                "balance": 1000,
                "play_coins": 0,
                "privilege": None,
                "exclusive_donate": None,
                "total_earned": 0,
                "games_played": 0,
                "win_streak": 0,
                "last_win": False,
                "is_admin": is_creator,
                "last_activity": time.time()
            }
            if is_creator:
                self.users[user_id]["balance"] = float('inf')
                self.users[user_id]["play_coins"] = float('inf')

    def is_creator(self, user_id: int) -> bool:
        if user_id not in self.users:
            return False
        username = self.users[user_id].get("username")
        return username and username.lower() in self.creator_usernames

    def is_admin(self, user_id: int) -> bool:
        return self.is_creator(user_id) or (user_id in self.users and self.users[user_id]["is_admin"])

    def is_banned(self, user_id: int) -> bool:
        return user_id in self.banned_users

    def check_privilege_bonus(self, user_id: int, base_win: int) -> int:
        user = self.users[user_id]
        bonus_multiplier = 1.0
        
        if user["privilege"]:
            privilege_info = self.privileges[user["privilege"]]
            bonus_multiplier *= privilege_info["bonus"]
        
        if user["exclusive_donate"]:
            donate_info = self.exclusive_donates[user["exclusive_donate"]]
            bonus_multiplier *= donate_info["multiplier"]
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
        bonus_multiplier *= self.global_multiplier
        
        return int(base_win * bonus_multiplier)

    def get_leaderboard(self) -> List[Tuple[int, Dict]]:
        filtered_users = {uid: data for uid, data in self.users.items() 
                         if not self.is_creator(uid)}
        sorted_users = sorted(filtered_users.items(), key=lambda x: x[1]["total_earned"], reverse=True)
        return sorted_users[:10]

    def spin_wheel(self, user_id: int) -> str:
        user = self.users[user_id]
        
        if not self.is_creator(user_id) and user["play_coins"] < 100:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PlayCoin! –ù—É–∂–Ω–æ 100 PlayCoin –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫–æ–ª–µ—Å–∞."
        
        if not self.is_creator(user_id):
            user["play_coins"] -= 100
            
        won_privilege = random.choice(list(self.privileges.keys()))
        user["privilege"] = won_privilege
        
        privilege_info = self.privileges[won_privilege]
        return f"üé° –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {privilege_info['title']}!\n–ë–æ–Ω—É—Å: +{int((privilege_info['bonus'] - 1) * 100)}% –∫ –≤—ã–∏–≥—Ä—ã—à–∞–º"

    def search_user_by_username(self, username: str) -> List[Tuple[int, Dict]]:
        found_users = []
        username = username.lower().replace('@', '')
        
        for user_id, user_data in self.users.items():
            if user_data["username"] and user_data["username"].lower() == username:
                found_users.append((user_id, user_data))
                
        return found_users

    def add_admin_log(self, admin_id: int, admin_username: str, action: str, target_username: str = "", details: str = ""):
        log_entry = {
            "timestamp": time.time(),
            "admin_id": admin_id,
            "admin_username": admin_username,
            "action": action,
            "target_username": target_username,
            "details": details
        }
        self.admin_logs.append(log_entry)
        
        if len(self.admin_logs) > 50:
            self.admin_logs.pop(0)

    def get_bot_stats(self) -> Dict:
        total_users = len(self.users)
        total_games = sum(user["games_played"] for user in self.users.values())
        total_balance = sum(user["balance"] for user_id, user in self.users.items() if not self.is_creator(user_id))
        total_earned = sum(user["total_earned"] for user_id, user in self.users.items() if not self.is_creator(user_id))
        
        return {
            "total_users": total_users,
            "total_games": total_games,
            "total_balance": total_balance,
            "total_earned": total_earned,
            "banned_users": len(self.banned_users),
            "active_admins": sum(1 for user in self.users.values() if user.get("is_admin", False))
        }

    def get_game_stats(self) -> Dict:
        return self.game_statistics

    def get_top_active_users(self, limit: int = 10) -> List[Tuple[int, Dict]]:
        sorted_users = sorted(self.users.items(), 
                            key=lambda x: x[1]["games_played"], 
                            reverse=True)
        return [user for user in sorted_users if not self.is_creator(user[0])][:limit]

    def mass_give_coins(self, amount: int, criteria: str = "all"):
        affected_users = 0
        for user_id, user_data in self.users.items():
            if self.is_creator(user_id):
                continue
                
            if criteria == "all" or (
                criteria == "with_privilege" and user_data["privilege"] or
                criteria == "no_privilege" and not user_data["privilege"]
            ):
                user_data["balance"] += amount
                affected_users += 1
                
        return affected_users

    def reset_economy(self):
        for user_id, user_data in self.users.items():
            if not self.is_creator(user_id):
                user_data.update({
                    "balance": 1000,
                    "play_coins": 0,
                    "privilege": None,
                    "total_earned": 0,
                    "games_played": 0,
                    "win_streak": 0
                })

    def cleanup_inactive_users(self, days: int):
        current_time = time.time()
        threshold = days * 24 * 60 * 60
        inactive_users = []
        
        for user_id, user_data in self.users.items():
            if self.is_creator(user_id):
                continue
                
            last_activity = user_data.get("last_activity", 0)
            if current_time - last_activity > threshold:
                inactive_users.append(user_id)
        
        for user_id in inactive_users:
            del self.users[user_id]
            
        return len(inactive_users)

    def create_promo_code(self, code: str, reward: int, max_uses: int = 100):
        self.promocodes[code.upper()] = {
            "reward": reward,
            "max_uses": max_uses,
            "used_count": 0,
            "created_at": time.time()
        }

bot_data = CasinoBot()

# ==================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–û–ó–î–ê–¢–ï–õ–Ø ====================

async def setbalance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance [id] [amount]")
        return
    
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    if target_id not in bot_data.users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    bot_data.users[target_id]["balance"] = amount
    await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {amount}")

async def reseteconomy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    bot_data.reset_economy()
    await update.message.reply_text("‚úÖ –≠–∫–æ–Ω–æ–º–∏–∫–∞ –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞!")

async def setmultiplier(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setmultiplier [value]")
        return
    
    try:
        multiplier = float(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    bot_data.global_multiplier = multiplier
    await update.message.reply_text(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {multiplier}x")

async def resetuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetuser [id]")
        return
    
    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_id not in bot_data.users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if bot_data.is_creator(target_id):
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞—Ç–µ–ª—è")
        return
    
    user_data = bot_data.users[target_id]
    user_data.update({
        "balance": 1000,
        "play_coins": 0,
        "privilege": None,
        "exclusive_donate": None,
        "total_earned": 0,
        "games_played": 0,
        "win_streak": 0,
        "last_win": False
    })
    
    await update.message.reply_text(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–±—Ä–æ—à–µ–Ω–∞")

async def massgive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /massgive [amount] [criteria]\n–ö—Ä–∏—Ç–µ—Ä–∏–∏: all, with_privilege, no_privilege")
        return
    
    try:
        amount = int(context.args[0])
        criteria = context.args[1].lower()
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if criteria not in ["all", "with_privilege", "no_privilege"]:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π. –î–æ—Å—Ç—É–ø–Ω–æ: all, with_privilege, no_privilege")
        return
    
    affected = bot_data.mass_give_coins(amount, criteria)
    await update.message.reply_text(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç {affected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫—Ä–∏—Ç–µ—Ä–∏–π: {criteria})")

async def listadmins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    admins = []
    for user_id, user_data in bot_data.users.items():
        if user_data.get("is_admin", False) or bot_data.is_creator(user_id):
            admins.append((user_id, user_data))
    
    if not admins:
        await update.message.reply_text("üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    response = "üëë –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ –ë–û–¢–ê:\n\n"
    for user_id, user_data in admins:
        role = "üëë –°–û–ó–î–ê–¢–ï–õ–¨" if bot_data.is_creator(user_id) else "üîß –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†"
        response += f"{role}\n"
        response += f"üë§ @{user_data['username']}\n"
        response += f"üÜî ID: {user_id}\n"
        response += f"üéÆ –ò–≥—Ä: {user_data['games_played']}\n"
        response += "‚îÄ" * 30 + "\n"
    
    await update.message.reply_text(response)

async def botstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    stats = bot_data.get_bot_stats()
    game_stats = bot_data.get_game_stats()
    
    response = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:\n\n"
    response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
    response += f"üéÆ –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {stats['total_games']}\n"
    response += f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {stats['total_balance']}\n"
    response += f"üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']}\n"
    response += f"üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {stats['banned_users']}\n"
    response += f"üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats['active_admins']}\n"
    response += f"üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: {bot_data.global_multiplier}x\n\n"
    
    response += "üéÆ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ò–ì–†–ê–ú:\n"
    for game_id, game_data in game_stats.items():
        game_name = bot_data.games[game_id]["name"]
        win_rate = (game_data['total_wins'] / game_data['plays'] * 100) if game_data['plays'] > 0 else 0
        response += f"  {game_name}: {game_data['plays']} –∏–≥—Ä ({win_rate:.1f}% –ø–æ–±–µ–¥)\n"
    
    await update.message.reply_text(response)

async def exportdata(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if not bot_data.users:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram
    response = "üìÅ –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–ø–µ—Ä–≤—ã–µ 50):\n\n"
    count = 0
    
    for user_id, user_data in list(bot_data.users.items())[:50]:
        if bot_data.is_creator(user_id):
            continue
            
        response += f"üë§ @{user_data['username']} (ID: {user_id})\n"
        response += f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}\n"
        response += f"üéÆ –ò–≥—Ä: {user_data['games_played']}\n"
        response += f"üèÜ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user_data['total_earned']}\n"
        response += "‚îÄ" * 40 + "\n"
        count += 1
        
        if len(response) > 3000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            break
    
    response += f"\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(bot_data.users)}"
    await update.message.reply_text(response)

async def topactive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    limit = 10
    if context.args and context.args[0].isdigit():
        limit = min(int(context.args[0]), 20)
    
    top_users = bot_data.get_top_active_users(limit)
    
    if not top_users:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
        return
    
    response = f"üèÜ –¢–û–ü-{limit} –ê–ö–¢–ò–í–ù–´–• –ò–ì–†–û–ö–û–í:\n\n"
    for i, (user_id, user_data) in enumerate(top_users, 1):
        response += f"{i}. @{user_data['username']}\n"
        response += f"   üéÆ –ò–≥—Ä: {user_data['games_played']}\n"
        response += f"   üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}\n"
        response += "‚îÄ" * 30 + "\n"
    
    await update.message.reply_text(response)

async def gamestats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    game_stats = bot_data.get_game_stats()
    
    response = "üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†:\n\n"
    for game_id, stats in game_stats.items():
        game_name = bot_data.games[game_id]["name"]
        win_rate = (stats['total_wins'] / stats['plays'] * 100) if stats['plays'] > 0 else 0
        
        response += f"üéÆ {game_name}:\n"
        response += f"   ‚Ä¢ –°—ã–≥—Ä–∞–Ω–æ: {stats['plays']} —Ä–∞–∑\n"
        response += f"   ‚Ä¢ –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: {stats['total_bets']}\n"
        response += f"   ‚Ä¢ –ü–æ–±–µ–¥: {stats['total_wins']}\n"
        response += f"   ‚Ä¢ Win Rate: {win_rate:.1f}%\n\n"
    
    await update.message.reply_text(response)

async def reboot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ"
    await update.message.reply_text("‚úÖ –ë–æ—Ç '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω'. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

async def cleanup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    days = 30
    if context.args and context.args[0].isdigit():
        days = int(context.args[0])
    
    removed_count = bot_data.cleanup_inactive_users(days)
    await update.message.reply_text(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å > {days} –¥–Ω–µ–π)")

async def setwelcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setwelcome [—Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è]")
        return
    
    welcome_text = ' '.join(context.args)
    bot_data.welcome_message = welcome_text
    await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n\n{welcome_text}")

async def createpromo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createpromo [–∫–æ–¥] [–Ω–∞–≥—Ä–∞–¥–∞] (–º–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)")
        return
    
    code = context.args[0].upper()
    try:
        reward = int(context.args[1])
        max_uses = int(context.args[2]) if len(context.args) > 2 else 100
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–≥—Ä–∞–¥–∞ –∏ –º–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return
    
    bot_data.create_promo_code(code, reward, max_uses)
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω:\n–ö–æ–¥: {code}\n–ù–∞–≥—Ä–∞–¥–∞: {reward} –º–æ–Ω–µ—Ç\n–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}")

async def testmode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if not context.args:
        await update.message.reply_text(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {'–í–ö–õ' if bot_data.test_mode else '–í–´–ö–õ'}")
        return
    
    mode = context.args[0].lower()
    if mode in ["on", "–≤–∫–ª", "true", "1"]:
        bot_data.test_mode = True
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –í–ö–õ–Æ–ß–ï–ù")
    elif mode in ["off", "–≤—ã–∫–ª", "false", "0"]:
        bot_data.test_mode = False
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –í–´–ö–õ–Æ–ß–ï–ù")
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /testmode [on/off]")

async def addgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addgame [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–æ–ø–∏—Å–∞–Ω–∏–µ]")
        return
    
    game_name = context.args[0]
    game_description = ' '.join(context.args[1:])
    
    new_game_id = max(bot_data.games.keys()) + 1
    bot_data.games[new_game_id] = {
        "name": game_name,
        "description": game_description
    }
    bot_data.game_statistics[new_game_id] = {
        "plays": 0,
        "total_bets": 0,
        "total_wins": 0
    }
    
    await update.message.reply_text(f"‚úÖ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\nID: {new_game_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {game_name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {game_description}")

async def massprivilege(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.is_creator(update.effective_user.id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –±–æ—Ç–∞")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /massprivilege [–ø—Ä–∏–≤–∏–ª–µ–≥–∏—è]\n–î–æ—Å—Ç—É–ø–Ω–æ: bronze, silver, gold, platinum")
        return
    
    privilege = context.args[0].lower()
    if privilege not in bot_data.privileges:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è. –î–æ—Å—Ç—É–ø–Ω–æ: bronze, silver, gold, platinum")
        return
    
    affected = 0
    for user_id, user_data in bot_data.users.items():
        if not bot_data.is_creator(user_id):
            user_data["privilege"] = privilege
            affected += 1
    
    privilege_title = bot_data.privileges[privilege]["title"]
    await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è {privilege_title} –≤—ã–¥–∞–Ω–∞ {affected} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

# ==================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–û–ó–î–ê–¢–ï–õ–Ø –ò –ê–î–ú–ò–ù–û–í ====================

async def userinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /userinfo [id]")
        return
    
    try:
        target_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_id not in bot_data.users:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = bot_data.users[target_id]
    privilege_title = "–ù–µ—Ç"
    if user_data["privilege"]:
        privilege_title = bot_data.privileges[user_data["privilege"]]["title"]
    
    donate_info = "–ù–µ—Ç"
    if user_data["exclusive_donate"]:
        donate_desc = bot_data.exclusive_donates[user_data["exclusive_donate"]]["description"]
        donate_info = f"{user_data['exclusive_donate']} ({donate_desc})"
    
    role = "üë§ –ò–≥—Ä–æ–∫"
    if bot_data.is_creator(target_id):
        role = "üëë –°–û–ó–î–ê–¢–ï–õ–¨"
    elif user_data.get("is_admin", False):
        role = "üîß –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†"
    
    last_activity = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(user_data.get("last_activity", 0)))
    
    response = f"üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:\n\n"
    response += f"üë§ Username: @{user_data['username']}\n"
    response += f"üÜî ID: {target_id}\n"
    response += f"üé≠ –†–æ–ª—å: {role}\n"
    response += f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}\n"
    response += f"üéØ PlayCoin: {user_data['play_coins']}\n"
    response += f"üëë –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {privilege_title}\n"
    response += f"üíé –î–æ–Ω–∞—Ç: {donate_info}\n"
    response += f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user_data['games_played']}\n"
    response += f"üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user_data['total_earned']}\n"
    response += f"üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {user_data['win_streak']}\n"
    response += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
    response += f"üö´ –°—Ç–∞—Ç—É—Å –±–∞–Ω–∞: {'–î–∞' if target_id in bot_data.banned_users else '–ù–µ—Ç'}"
    
    await update.message.reply_text(response)

async def announce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not bot_data.is_admin(user_id):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
        return
    
    message = ' '.join(context.args)
    sender_role = "–°–æ–∑–¥–∞—Ç–µ–ª—è" if bot_data.is_creator(user_id) else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    sent_count = 0
    failed_count = 0
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–µ—Ä–≤—ã–º–∏ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    users_to_notify = list(bot_data.users.items())[:100]
    
    for target_id, user_data in users_to_notify:
        try:
            await context.bot.send_message(
                chat_id=target_id,
                text=f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_role}:\n\n{message}"
            )
            sent_count += 1
            time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        except Exception as e:
            failed_count += 1
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {e}")
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(bot_data.users)}"
    )

# ==================== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ö–û–ú–ê–ù–î–´ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ) ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    if bot_data.is_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    
    bot_data.init_user(user_id, user.username)
    bot_data.users[user_id]["last_activity"] = time.time()
    
    welcome_text = bot_data.welcome_message or "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç!"
    
    if bot_data.is_creator(user_id):
        await update.message.reply_text(
            f"üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–û–ó–î–ê–¢–ï–õ–¨!\n"
            f"{welcome_text}\n\n"
            f"üë§ –í–∞—à username: @{user.username}\n"
            f"üÜî –í–∞—à ID: `{user_id}`\n\n"
            f"üíé –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏ PlayCoin!\n\n"
            f"üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/play [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            f"/shop - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n"
            f"/leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
            f"/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/wheel - –∫–æ–ª–µ—Å–æ —É–¥–∞—á–∏ (100 PC)\n"
            f"/author - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ\n\n"
            f"‚öôÔ∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—Ç–µ–ª—è:\n"
            f"/setbalance, /reseteconomy, /setmultiplier, /resetuser\n"
            f"/massgive, /listadmins, /botstats, /exportdata\n"
            f"/topactive, /gamestats, /reboot, /cleanup\n"
            f"/setwelcome, /createpromo, /testmode, /addgame\n"
            f"/massprivilege, /announce, /userinfo",
            parse_mode='Markdown'
        )
    elif bot_data.users[user_id].get("is_admin", False):
        await update.message.reply_text(
            f"üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
            f"{welcome_text}\n\n"
            f"üë§ –í–∞—à ID: `{user_id}`\n\n"
            f"üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/play [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            f"/shop - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n"
            f"/leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
            f"/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/wheel - –∫–æ–ª–µ—Å–æ —É–¥–∞—á–∏ (100 PC)\n"
            f"/author - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ\n\n"
            f"‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            f"/givecash, /givedonate, /ban, /unban\n"
            f"/search, /announce, /userinfo",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"{welcome_text}\n\n"
            f"üë§ –í–∞—à ID: `{user_id}`\n\n"
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/play [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            f"/shop - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π\n"
            f"/leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
            f"/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            f"/wheel - –∫–æ–ª–µ—Å–æ —É–¥–∞—á–∏ (100 PC)\n"
            f"/author - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ",
            parse_mode='Markdown'
        )

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if bot_data.is_banned(user_id):
        await update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    bot_data.users[user_id]["last_activity"] = time.time()
    
    if len(context.args) != 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /play [—Å—Ç–∞–≤–∫–∞] [–Ω–æ–º–µ—Ä –∏–≥—Ä—ã]\n\n"
            "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n"
            "1. üé° –†—É–ª–µ—Ç–∫–∞ (1-36)\n"
            "2. üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n"
            "3. ü™ô –ú–æ–Ω–µ—Ç–∫–∞"
        )
        return

    try:
        bet = int(context.args[0])
        game_id = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞–≤–∫–∞ –∏ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return

    if game_id not in bot_data.games:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    user = bot_data.users[user_id]
    is_creator = bot_data.is_creator(user_id)
    
    if not is_creator and bet > user["balance"]:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    if bet <= 0:
        await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
    bot_data.game_statistics[game_id]["plays"] += 1
    bot_data.game_statistics[game_id]["total_bets"] += bet

    if not is_creator:
        user["balance"] -= bet
    
    user["games_played"] += 1

    result_text = ""
    win_amount = 0
    won = False

    if game_id == 1:
        user_number = random.randint(1, 36)
        win_number = random.randint(1, 36)
        if user_number == win_number:
            win_amount = bet * 36
            won = True
            result_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {win_number} –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}!"
        else:
            result_text = f"‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–µ —á–∏—Å–ª–æ: {user_number}, –≤—ã–ø–∞–ª–æ: {win_number}"

    elif game_id == 2:
        user_x, user_y = random.randint(1, 10), random.randint(1, 10)
        target_x, target_y = random.randint(1, 10), random.randint(1, 10)
        distance = abs(user_x - target_x) + abs(user_y - target_y)
        
        if distance == 0:
            win_amount = bet * 10
            won = True
            result_text = f"üéâ –ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ! –í—ã–∏–≥—Ä—ã—à: {win_amount}"
        elif distance <= 2:
            win_amount = bet * 3
            won = True
            result_text = f"‚úÖ –ë–ª–∏–∑–∫–æ! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance}. –í—ã–∏–≥—Ä—ã—à: {win_amount}"
        else:
            result_text = f"‚ùå –ú–∏–º–æ. –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({user_x},{user_y}), —Ü–µ–ª—å: ({target_x},{target_y})"

    elif game_id == 3:
        user_choice = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
        result = random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])
        if user_choice == result:
            win_amount = bet * 2
            won = True
            result_text = f"üéâ {result.capitalize()}! –í—ã —É–≥–∞–¥–∞–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}!"
        else:
            result_text = f"‚ùå {result.capitalize()}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."

    if won:
        user["last_win"] = True
        user["win_streak"] += 1
        bot_data.game_statistics[game_id]["total_wins"] += 1
        
        if user["win_streak"] >= 2:
            play_coins_earned = 5
            user["play_coins"] += play_coins_earned
            result_text += f"\nüéØ –°—Ç—Ä–∞–π–∫ {user['win_streak']} –ø–æ–±–µ–¥! +{play_coins_earned} PlayCoin"
    else:
        user["last_win"] = False
        user["win_streak"] = 0

    if win_amount > 0:
        bonus_win = bot_data.check_privilege_bonus(user_id, win_amount)
        if bonus_win > win_amount:
            result_text += f"\nüéÅ –ë–æ–Ω—É—Å: +{bonus_win - win_amount}"
            win_amount = bonus_win
        
        if not is_creator:
            user["balance"] += win_amount
            user["total_earned"] += win_amount

    if not is_creator:
        user["balance"] = max(0, user["balance"])
    
    result_text += f"\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {'‚àû' if is_creator else user['balance']}"
    result_text += f"\nüéØ PlayCoin: {'‚àû' if is_creator else user['play_coins']}"
    result_text += f"\nüî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {user['win_streak']}"
    
    await update.message.reply_text(result_text)

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_activity)

def main():
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("play", play))
    application.add_handler(CommandHandler("shop", shop))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("author", author))
    application.add_handler(CommandHandler("wheel", wheel))
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    application.add_handler(CommandHandler("givecash", givecash))
    application.add_handler(CommandHandler("givedonate", givedonate))
    application.add_handler(CommandHandler("ban", ban))
    application.add_handler(CommandHandler("unban", unban))
    application.add_handler(CommandHandler("search", search))
    application.add_handler(CommandHandler("userinfo", userinfo))
    application.add_handler(CommandHandler("announce", announce))
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
    application.add_handler(CommandHandler("setbalance", setbalance))
    application.add_handler(CommandHandler("reseteconomy", reseteconomy))
    application.add_handler(CommandHandler("setmultiplier", setmultiplier))
    application.add_handler(CommandHandler("resetuser", resetuser))
    application.add_handler(CommandHandler("massgive", massgive))
    application.add_handler(CommandHandler("listadmins", listadmins))
    application.add_handler(CommandHandler("botstats", botstats))
    application.add_handler(CommandHandler("exportdata", exportdata))
    application.add_handler(CommandHandler("topactive", topactive))
    application.add_handler(CommandHandler("gamestats", gamestats))
    application.add_handler(CommandHandler("reboot", reboot))
    application.add_handler(CommandHandler("cleanup", cleanup))
    application.add_handler(CommandHandler("setwelcome", setwelcome))
    application.add_handler(CommandHandler("createpromo", createpromo))
    application.add_handler(CommandHandler("testmode", testmode))
    application.add_handler(CommandHandler("addgame", addgame))
    application.add_handler(CommandHandler("massprivilege", massprivilege))
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏)
    application.add_handler(CommandHandler("setgladmin", setgladmin))
    application.add_handler(CommandHandler("logs", logs))
    
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")
    print("üëë –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @FrapelloGello")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
