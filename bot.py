import os
import logging
import random
import time
import json
import threading
import atexit
import signal
from typing import Dict, List, Tuple, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Health server –¥–ª—è Render
try:
    from http.server import HTTPServer, BaseHTTPRequestHandler
except ImportError:
    from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'OK')
    def log_message(self, format, *args):
        return

def run_health_server():
    port = int(os.environ.get('PORT', 5000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    logger.info(f"Health server running on port {port}")
    server.serve_forever()

threading.Thread(target=run_health_server, daemon=True).start()

TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TOKEN:
    logger.error("TELEGRAM_TOKEN not set!")
    raise ValueError("TELEGRAM_TOKEN not found")

class CasinoBot:
    def __init__(self):
        self.data_file = "bot_data.json"
        self.social_file = "social_data.json"
        self.creator_usernames = {"frapellogello"}
        self.users = {}
        self.banned_users = set()
        self.admin_logs = []
        self.global_multiplier = 1.0
        self.welcome_message = None
        self.test_mode = False
        self.promocodes = {}
        self.admin_passwords = {}
        self.creator_password = "FrapSnick88"
        self.last_reply_time = {}
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.friends_requests = {}
        self.friends = {}
        self.clubs = {}
        self.user_clubs = {}
        self.club_chats = {}
        self.club_safes = {}
        self.test_mode_users = {}
        self.pending_withdrawals = {}
        
        self.game_statistics = {
            1: {"plays": 0, "total_bets": 0, "total_wins": 0},
            2: {"plays": 0, "total_bets": 0, "total_wins": 0},
            3: {"plays": 0, "total_bets": 0, "total_wins": 0},
            4: {"plays": 0, "total_bets": 0, "total_wins": 0}
        }
        
        self.games = {
            1: {"name": "üé° –†—É–ª–µ—Ç–∫–∞", "description": "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36"},
            2: {"name": "üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", "description": "–£–≥–∞–¥–∞–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏"},
            3: {"name": "ü™ô –ú–æ–Ω–µ—Ç–∫–∞", "description": "–û—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞"},
            4: {"name": "üçÄ –£–¥–∞—á–∞", "description": "50/50 —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å x2"}
        }
        
        self.privileges = {
            "bronze": {"cost": 1000, "bonus": 1.1, "title": "ü•â –ë—Ä–æ–Ω–∑–æ–≤—ã–π –∏–≥—Ä–æ–∫"},
            "silver": {"cost": 5000, "bonus": 1.2, "title": "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π –º–∞–≥–Ω–∞—Ç"},
            "gold": {"cost": 15000, "bonus": 1.3, "title": "ü•á –ó–æ–ª–æ—Ç–æ–π –∫–æ—Ä–æ–ª—å"},
            "platinum": {"cost": 30000, "bonus": 1.5, "title": "üíé –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∏–º–ø–µ—Ä–∞—Ç–æ—Ä"}
        }
        
        self.exclusive_donates = {
            "TITAN": {"multiplier": 10, "description": "x10 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"},
            "FLE": {"multiplier": 20, "description": "x20 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"},
            "DRAGON": {"multiplier": 50, "description": "x50 –º–æ–Ω–µ—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ + 1 –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª–µ—Å–∞"}
        }
        
        self.load_data()
        self.load_social_data()
        self.setup_emergency_save()

    def setup_emergency_save(self):
        def emergency_handler():
            try:
                logger.info("üîÑ Emergency save...")
                self.save_data()
                self.save_social_data()
                logger.info("‚úÖ Emergency save completed")
            except Exception as e:
                logger.error(f"‚ùå Emergency save failed: {e}")
        
        def signal_handler(signum, frame):
            logger.info(f"üì¶ Signal {signum} received")
            emergency_handler()
            exit(0)
        
        atexit.register(emergency_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        logger.info("üõ°Ô∏è Emergency save activated")

    def save_data(self):
        try:
            data = {
                'users': self.users,
                'banned_users': list(self.banned_users),
                'admin_logs': self.admin_logs,
                'global_multiplier': self.global_multiplier,
                'welcome_message': self.welcome_message,
                'test_mode': self.test_mode,
                'promocodes': self.promocodes,
                'admin_passwords': self.admin_passwords,
                'game_statistics': self.game_statistics,
                'last_reply_time': self.last_reply_time
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info("üíæ Data saved")
        except Exception as e:
            logger.error(f"‚ùå Save error: {e}")

    def load_data(self):
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                self.users = data.get('users', {})
                self.banned_users = set(data.get('banned_users', []))
                self.admin_logs = data.get('admin_logs', [])
                self.global_multiplier = data.get('global_multiplier', 1.0)
                self.welcome_message = data.get('welcome_message')
                self.test_mode = data.get('test_mode', False)
                self.promocodes = data.get('promocodes', {})
                self.admin_passwords = data.get('admin_passwords', {})
                self.game_statistics = data.get('game_statistics', self.game_statistics)
                self.last_reply_time = data.get('last_reply_time', {})
                
                self.users = {int(k): v for k, v in self.users.items()}
                self.last_reply_time = {int(k): v for k, v in self.last_reply_time.items()}
                
                logger.info("üíæ Data loaded")
            else:
                logger.info("üìù New database created")
        except Exception as e:
            logger.error(f"‚ùå Load error: {e}")

    def save_social_data(self):
        try:
            data = {
                'friends_requests': self.friends_requests,
                'friends': self.friends,
                'clubs': self.clubs,
                'user_clubs': self.user_clubs,
                'club_chats': self.club_chats,
                'club_safes': self.club_safes,
                'test_mode_users': self.test_mode_users,
                'pending_withdrawals': self.pending_withdrawals
            }
            with open(self.social_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info("üíæ Social data saved")
        except Exception as e:
            logger.error(f"‚ùå Social save error: {e}")

    def load_social_data(self):
        try:
            if os.path.exists(self.social_file):
                with open(self.social_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                self.friends_requests = data.get('friends_requests', {})
                self.friends = data.get('friends', {})
                self.clubs = data.get('clubs', {})
                self.user_clubs = data.get('user_clubs', {})
                self.club_chats = data.get('club_chats', {})
                self.club_safes = data.get('club_safes', {})
                self.test_mode_users = data.get('test_mode_users', {})
                self.pending_withdrawals = data.get('pending_withdrawals', {})
                
                # Convert keys to int
                self.friends_requests = {int(k): {int(k2): v2 for k2, v2 in v.items()} for k, v in self.friends_requests.items()}
                self.friends = {int(k): v for k, v in self.friends.items()}
                self.user_clubs = {int(k): v for k, v in self.user_clubs.items()}
                self.test_mode_users = {int(k): v for k, v in self.test_mode_users.items()}
                self.pending_withdrawals = {int(k): v for k, v in self.pending_withdrawals.items()}
                
                logger.info("üíæ Social data loaded")
            else:
                logger.info("üìù New social database created")
        except Exception as e:
            logger.error(f"‚ùå Social load error: {e}")

    def init_user(self, user_id: int, username: str):
        if user_id not in self.users:
            is_creator = username and username.lower() in self.creator_usernames
            self.users[user_id] = {
                "username": username,
                "balance": 1000,
                "play_coins": 0,
                "privilege": None,
                "exclusive_donate": None,
                "total_earned": 0,
                "games_played": 0,
                "win_streak": 0,
                "last_win": False,
                "is_admin": False,
                "creator_authenticated": False,
                "admin_authenticated": False,
                "creator_auth_time": 0,
                "admin_auth_time": 0,
                "last_activity": time.time(),
                "last_daily": 0,
                "daily_streak": 0,
                "bank_accounts": []
            }
            if is_creator:
                self.users[user_id]["balance"] = float('inf')
                self.users[user_id]["play_coins"] = float('inf')
            self.save_data()

    def is_creator(self, user_id: int) -> bool:
        if user_id not in self.users: return False
        username = self.users[user_id].get("username")
        return username and username.lower() in self.creator_usernames

    def is_admin(self, user_id: int) -> bool:
        return self.is_creator(user_id) or (user_id in self.users and self.users[user_id]["is_admin"])

    def is_banned(self, user_id: int) -> bool:
        return user_id in self.banned_users

    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def add_friend_request(self, from_user_id: int, to_user_id: int):
        if to_user_id not in self.friends_requests:
            self.friends_requests[to_user_id] = {}
        self.friends_requests[to_user_id][from_user_id] = time.time()
        self.save_social_data()

    def accept_friend_request(self, user_id: int, from_user_id: int):
        if user_id not in self.friends: self.friends[user_id] = []
        if from_user_id not in self.friends: self.friends[from_user_id] = []
        
        if from_user_id not in self.friends[user_id]:
            self.friends[user_id].append(from_user_id)
        if user_id not in self.friends[from_user_id]:
            self.friends[from_user_id].append(user_id)
        
        if user_id in self.friends_requests and from_user_id in self.friends_requests[user_id]:
            del self.friends_requests[user_id][from_user_id]
        self.save_social_data()

    def search_user_by_username(self, username: str) -> List[Tuple[int, Dict]]:
        found_users = []
        username = username.lower().replace('@', '')
        for user_id, user_data in self.users.items():
            if user_data["username"] and user_data["username"].lower() == username:
                found_users.append((user_id, user_data))
        return found_users

    # –ò–≥—Ä–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    def check_privilege_bonus(self, user_id: int, base_win: int) -> int:
        user = self.users[user_id]
        bonus_multiplier = 1.0
        if user["privilege"]:
            privilege_info = self.privileges[user["privilege"]]
            bonus_multiplier *= privilege_info["bonus"]
        if user["exclusive_donate"]:
            donate_info = self.exclusive_donates[user["exclusive_donate"]]
            bonus_multiplier *= donate_info["multiplier"]
        bonus_multiplier *= self.global_multiplier
        return int(base_win * bonus_multiplier)

    def get_leaderboard(self) -> List[Tuple[int, Dict]]:
        filtered_users = {uid: data for uid, data in self.users.items() if not self.is_creator(uid)}
        sorted_users = sorted(filtered_users.items(), key=lambda x: x[1]["total_earned"], reverse=True)
        return sorted_users[:10]

bot_data = CasinoBot()

# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    bot_data.init_user(user_id, update.effective_user.username)
    welcome = bot_data.welcome_message or "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç!"
    update.message.reply_text(f"{welcome}\n\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")

def help_cmd(update: Update, context: CallbackContext):
    help_text = """
ü§ñ **–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**

üéÆ **–ò–≥—Ä—ã:**
/play [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞] - —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É

üí∞ **–≠–∫–æ–Ω–æ–º–∏–∫–∞:**
/balance - –≤–∞—à –±–∞–ª–∞–Ω—Å
/daily - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
/leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤

üë• **–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ:**
/addfriend [ID] - –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
/createclub [–Ω–∞–∑–≤–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –∫–ª—É–±
    """
    update.message.reply_text(help_text, parse_mode='Markdown')

def balance(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    bot_data.init_user(user_id, update.effective_user.username)
    user = bot_data.users[user_id]
    update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']}\nüéØ PlayCoin: {user['play_coins']}")

def play(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if len(context.args) != 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /play [—Å—Ç–∞–≤–∫–∞] [–∏–≥—Ä–∞]\n\n–ò–≥—Ä—ã: 1-üé°, 2-üéØ, 3-ü™ô, 4-üçÄ")
        return

    try:
        bet = int(context.args[0])
        game_id = int(context.args[1])
    except ValueError:
        update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –∏ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        return

    if game_id not in bot_data.games:
        update.message.reply_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    bot_data.init_user(user_id, update.effective_user.username)
    user = bot_data.users[user_id]
    
    if not bot_data.is_creator(user_id) and bet > user["balance"]:
        update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        return

    if bet <= 0:
        update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        return

    # –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
    bot_data.game_statistics[game_id]["plays"] += 1
    bot_data.game_statistics[game_id]["total_bets"] += bet
    
    if not bot_data.is_creator(user_id):
        user["balance"] -= bet
    
    user["games_played"] += 1

    won = random.choice([True, False])
    if won:
        win_amount = bet * 2
        bonus_win = bot_data.check_privilege_bonus(user_id, win_amount)
        
        if not bot_data.is_creator(user_id):
            user["balance"] += bonus_win
            user["total_earned"] += bonus_win
        
        user["last_win"] = True
        user["win_streak"] += 1
        bot_data.game_statistics[game_id]["total_wins"] += 1
        
        result_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bonus_win}!"
    else:
        user["last_win"] = False
        user["win_streak"] = 0
        result_text = "‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."

    result_text += f"\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {'‚àû' if bot_data.is_creator(user_id) else user['balance']}"
    result_text += f"\nüî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {user['win_streak']}"
    
    bot_data.save_data()
    update.message.reply_text(result_text)

def daily(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    user = bot_data.users[user_id]
    
    current_time = time.time()
    last_daily = user.get("last_daily", 0)
    
    if current_time - last_daily < 24 * 3600:
        wait_time = 24 * 3600 - int(current_time - last_daily)
        hours = wait_time // 3600
        minutes = (wait_time % 3600) // 60
        update.message.reply_text(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º")
        return
    
    reward = 5000
    user["balance"] += reward
    user["last_daily"] = current_time
    user["daily_streak"] = user.get("daily_streak", 0) + 1
    user["total_earned"] += reward
    
    bot_data.save_data()
    update.message.reply_text(f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: +{reward}üí∞\nüí≥ –ë–∞–ª–∞–Ω—Å: {user['balance']}")

def stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    user = bot_data.users[user_id]
    
    update.message.reply_text(
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']}\n"
        f"üéØ PlayCoin: {user['play_coins']}\n"
        f"üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user['games_played']}\n"
        f"üèÜ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_earned']}\n"
        f"üî• –°–µ—Ä–∏—è –ø–æ–±–µ–¥: {user['win_streak']}"
    )

def leaderboard(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    leaderboard_data = bot_data.get_leaderboard()
    
    if not leaderboard_data:
        update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤")
        return
    
    text = "üèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í üèÜ\n\n"
    
    for i, (user_id, user_data) in enumerate(leaderboard_data, 1):
        username = f"@{user_data['username']}" if user_data["username"] else f"ID: {user_id}"
        text += f"{i}. {username}\n"
        text += f"   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user_data['total_earned']}\n\n"
    
    update.message.reply_text(text)

# –°–û–¶–ò–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´
def addfriend(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if not context.args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addfriend [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
        return
    
    try:
        target_id = int(context.args[0])
    except ValueError:
        update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    if target_id not in bot_data.users:
        update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if target_id == user_id:
        update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è")
        return
    
    bot_data.init_user(user_id, update.effective_user.username)
    bot_data.init_user(target_id, bot_data.users[target_id]["username"])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
    if target_id in bot_data.friends_requests and user_id in bot_data.friends_requests[target_id]:
        update.message.reply_text("‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –¥—Ä—É–∑—å—è
    if user_id in bot_data.friends and target_id in bot_data.friends[user_id]:
        update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É –≤–∞—Å –≤ –¥—Ä—É–∑—å—è—Ö")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    bot_data.add_friend_request(user_id, target_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"friend_accept_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"friend_reject_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        requester_username = bot_data.users[user_id]["username"] or f"ID:{user_id}"
        context.bot.send_message(
            chat_id=target_id,
            text=f"üë• –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç @{requester_username}\n\n–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å?",
            reply_markup=reply_markup
        )
        update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")

def createclub(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if bot_data.is_banned(user_id):
        update.message.reply_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    if not context.args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createclub [–Ω–∞–∑–≤–∞–Ω–∏–µ]")
        return
    
    club_name = context.args[0]
    
    bot_data.init_user(user_id, update.effective_user.username)
    user = bot_data.users[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    if user["play_coins"] < 200 and user["balance"] < 5000000:
        update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ 200 PlayCoin –ò–õ–ò 5,000,000 –º–æ–Ω–µ—Ç")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—É–±
    if club_name in bot_data.clubs:
        update.message.reply_text("‚ùå –ö–ª—É–± —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª—É–±
    bot_data.clubs[club_name] = {
        "owner": user_id,
        "members": {user_id: {"rank": 6, "joined_at": time.time()}},
        "ranks": ["–ù–æ–≤–∏—á–æ–∫", "–£—á–∞—Å—Ç–Ω–∏–∫", "–ê–∫—Ç–∏–≤–Ω—ã–π", "–û—Ñ–∏—Ü–µ—Ä", "–í–∏—Ü–µ-–ª–∏–¥–µ—Ä"],
        "created_at": time.time(),
        "description": ""
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª—É–±—ã
    if user_id not in bot_data.user_clubs:
        bot_data.user_clubs[user_id] = []
    bot_data.user_clubs[user_id].append(club_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –∏ —Å–µ–π—Ñ–∞
    bot_data.club_chats[club_name] = []
    bot_data.club_safes[club_name] = {"balance": 0, "transactions": []}
    
    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    if user["play_coins"] >= 200:
        user["play_coins"] -= 200
        cost_text = "200 PlayCoin"
    else:
        user["balance"] -= 5000000
        cost_text = "5,000,000 –º–æ–Ω–µ—Ç"
    
    bot_data.save_data()
    bot_data.save_social_data()
    
    update.message.reply_text(f"‚úÖ –ö–ª—É–± '{club_name}' —Å–æ–∑–¥–∞–Ω –∑–∞ {cost_text}!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /club –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if bot_data.is_banned(user_id):
        query.edit_message_text("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è
    if data.startswith("friend_accept_"):
        from_user_id = int(data.split("_")[2])
        bot_data.accept_friend_request(user_id, from_user_id)
        query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        try:
            requester_username = bot_data.users[user_id]["username"] or f"ID:{user_id}"
            context.bot.send_message(
                chat_id=from_user_id,
                text=f"‚úÖ @{requester_username} –ø—Ä–∏–Ω—è–ª(–∞) –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!"
            )
        except: pass
    
    elif data.startswith("friend_reject_"):
        from_user_id = int(data.split("_")[2])
        bot_data.reject_friend_request(user_id, from_user_id)
        query.edit_message_text("‚ùå –ó–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω")

def main():
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_cmd))
    dispatcher.add_handler(CommandHandler("balance", balance))
    dispatcher.add_handler(CommandHandler("play", play))
    dispatcher.add_handler(CommandHandler("daily", daily))
    dispatcher.add_handler(CommandHandler("stats", stats))
    dispatcher.add_handler(CommandHandler("leaderboard", leaderboard))
    
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("addfriend", addfriend))
    dispatcher.add_handler(CommandHandler("createclub", createclub))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
